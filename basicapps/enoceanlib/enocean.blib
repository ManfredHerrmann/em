' This script is an example of the EMDO101 energy manager
' Please visit us at www.swissembedded.com
' Copyright (c) 2015-2016 swissEmbedded GmbH, All rights reserved.
' EMDO enocean library, based on Enocean EPP 2.6.3 specification
' the enocean protocol description, see referenced pages below in source code
' http://www.enocean-alliance.org/eep
' Eltako enocean devices (see page 10 and following)
' http://www.eltako.com/fileadmin/downloads/en/_main_catalogue/Gesamt-Katalog_ChT_gb_highRes.pdf
' Omnio enocean devices (protocol details see individual modules)
' http://www.awag.ch/ekat/page_de/awagpg_n_5.html

' Some examples on usage 
' LIBRARY LOAD "enocean"
'start:
' DISPATCH 1000
'goto start
 
'@lib_init
FUNCTION __enocean_init()
 ' Register enocean receive packet callback automatically on library load 
 print "init enocean"
 ON ENOCEAN eoReceive
END FUNCTION
 
'@lib_destroy
FUNCTION __enocean_destroy()
  ON ENOCEAN eoReceive DETACH
  print "deinit enocean"
END FUNCTION

' This function is called upon the reception of an enocean packet.
' EMDO can hold up to 2 packets on its stack.
' it is important that the callback functions immediately return to allow the processing of the full stack
' it tries to call the following callbacks
' Radio telegram: eoRxRadio(tp%, da$, oda$, rorg%, id%)
FUNCTION eoReceive()
 LOCAL n%,tp%,da$,oda$,rorg%,id%
 DO
  id%=-1
  ' Process all telegram from stack
  n%=EnoceanReceive(tp%,da$,oda$,0)
  IF NOT n% THEN
   IF tp%=1 THEN
    rorg%=asc(left$(da$,1))
    select case rorg%
     case &hf6
      id%=conv("bbe/u32",mid$(da$,3,4))    
     case &hd5
      id%=conv("bbe/u32",mid$(da$,3,4))
     case &ha5
      id%=conv("bbe/u32",mid$(da$,6,4))    
     case &hd2
      id%=conv("bbe/u32",mid$(da$,len(da$)-6,4))
     case else
      eoLog(tp%,da$,oda$,"eoRxRadio")
    end select
    n%=CALL("eoRxRadio",tp%,da$,oda$,rorg%,id%)    
   ELSE
    eoLog(tp%,da$,oda$,"eoRxPacket")
   ENDIF
  ELSE
   EXIT DO
  ENDIF
 LOOP
 eoReceive=0
END FUNCTION

' Parse RPS telegram
' tp%  telegram type (must be radio)
' da$  data array
' oda$ optional data array
' db0% data byte 0
' id%  sender id
' st%  sender status
' returns -1 on error (not radio packet)
FUNCTION eoRxF6(tp%,da$,oda$,db0%,id%,st%)
 LOCAL rorg%
 rorg%=asc(left$(da$,1))
 IF tp%<>1 OR rorg%<>&HF6 THEN
  eoRxF6=-1
 ENDIF
 'RPS telegram: DB0, Sender ID, Status
 db0%=asc(mid$(da$,2,1))
 id%=conv("bbe/u32",mid$(da$,3,4))    
 st%=asc(mid$(da$,7,1))
 eoRxF6=0
END FUNCTION

' Parse 1BS telegram
' tp%  telegram type (must be radio)
' da$  data array
' oda$ optional data array
' db0% data byte 0
' id%  sender id
' st%  sender status
' returns -1 on error (not radio packet)
FUNCTION eoRxD5(tp%,da$,oda$,db0%,id%,st%)
 LOCAL rorg%
 rorg%=asc(left$(da$,1))
 IF tp%<>1 OR rorg%<>&HD5 THEN
  eoRxD5=-1
 ENDIF
 'Contacts and Switches
 '1BS telegram: DB0, Sender ID, Status (page 11)
 db0%=asc(mid$(da$,2,1))
 id%=conv("bbe/u32",mid$(da$,3,4))
 st%=asc(mid$(da$,7,1))
 eoRxD5=0
END FUNCTION

' Parse 4BS telegram
' tp%  telegram type (must be radio)
' da$  data array
' oda$ optional data array
' db0% data byte 0
' db1% data byte 1
' db2% data byte 2
' db3% data byte 3
' id%  sender id
' st%  sender status
' returns -1 on error (not radio packet)
FUNCTION eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 LOCAL rorg%
 rorg%=asc(left$(da$,1))
 IF tp%<>1 OR rorg%<>&HA5 THEN
  eoRxA5=-1
 ENDIF
 '4BS telegram: DB3-DB0, Sender ID, Status (page 12)
 db3%=asc(mid$(da$,2,1))
 db2%=asc(mid$(da$,3,1))
 db1%=asc(mid$(da$,4,1))
 db0%=asc(mid$(da$,5,1))
 id%=conv("bbe/u32",mid$(da$,6,4))    
 st%=asc(mid$(da$,10,1))
 eoRxA5=0
END FUNCTION

' Parse VLD telegram
' tp%  telegram type (must be radio)
' da$  data array
' oda$ optional data array
' db0% data byte 0
' db1% data byte 1
' db2% data byte 2
' db3% data byte 3
' id%  sender id
' st%  sender status
' crc16 checksum
' returns -1 on error (not radio packet)
FUNCTION eoRxD2(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 LOCAL rorg%
 rorg%=asc(left$(da$,1))
 IF tp%<>1 OR rorg%<>&HD2 THEN
  eoRxD2=-1
 ENDIF
 'VLD telegram: DB3-DB0 (depending on length), Sender ID, Status, CRC8
 db$=mid$(da$, 2,len(da$)-7)
 id%=conv("bbe/u32",mid$(da$,len(da$)-6,4))
 st%=asc(mid$(da$,len(da$)-1,1))
 crc8%=asc(right$(da$,1))
 eoRxD2=0
END FUNCTION
 
 
' Callback eoRxRPS helper function for Rocker
' F6-02-01, F6-02-02
' It receives the RPS telegram and parses the rocker states
' Receive Rocker Switch, 2 Rocker, page 15
' We get type info and two bits on status which help us to interpret
' Depending on switch type press and release events can be parsed
' tp%    type of the packet (from callback eoRxRPS)
' da$    data array
' oda$   optional data array
' st%    status  (from callback eoRxRPS)
' rock1% Rocker 1: 0=Button A1, 1=Button A0, 2=Button B1, 3=Button B0, -1=invalid
' bow%  0=released, 1=pressed
' rock2% Rocker 2: 0=Button A1, 1=Button A0, 2=Button B1, 3=Button B0, -1=invalid
' ac%    0= No 2nd action, 1=2nd action valid
' num%   number of buttons 0=no button, 3= 3 or 4 buttons, -1=invalid
' Return negative on error, return value state of T21 and NU (required for interpretation)
' 0,1,2,3 and -1 on error
FUNCTION eoRxF60201(tp%,da$,oda$,st%,rock1%,bow%,rock2%,num%,ac%)
 LOCAL n%,id%
 n%=eoRxF6(tp%,da$,oda$,db0%,id%,st%)
 IF n% < 0 THEN
  eoRxF60201=-1
  EXIT FUNCTION
 ENDIF
 eoRxF60201=-1
 rock1%=-1
 rock2%=-1
 ac%=-1
 num%=-1
 bow%=-1
 select case (st% and &h30)
  case &H30 ' T21=1, NU = 1
   rock1%=(db0% and &he0)/32
   bow%=(db0% and &h10)/16
   rock2%=(db0% and &h0e)/2
   ac%=(db0% and &h1)
   eoRxF60201=3
  case &H20 'T21=1, NU = 0
   num%=(db0% and &he0)/32
   bow%=(db0% and &h10)/16
   eoRxF60201=2
  case &H10 'T21=0, NU = 1   
   rock1%=(db0% and &he0)/32
   bow%=(db0% and &h10)/16
   rock2%=(db0% and &h0e)/2
   ac%=(db0% and &h1)   
   eoRxF60201=1
  case &H00 'T21=0, NU = 0   
   num%=(db0% and &he0)/32
   bow%=(db0% and &h10)/16
   eoRxF60201=0
 end select
END FUNCTION

' see eoRxF60201
FUNCTION eoRxF60202(tp%,da$,oda$,st%,rock1%,bow%,rock2%,num%,ac%)
 LOCAL id%
 eoRXF60202=eoRxF60201(tp%,da$,oda$,st%,rock1%,bow%,rock2%,num%,ac%)
END FUNCTION

' Callback eoRxRPS helper function for 2-Rocker
' F6-02-03
' It receives the RPS telegram and parses the rocker states
' Receive Rocker Switch, 2 Rocker, page 15
' We get type info and two bits on status which help us to interpret
' Depending on switch type press and release events can be parsed
' tp%    type of the packet (from callback eoRxRPS)
' da$    data array
' oda$   optional data array
' st%    status  (from callback eoRxRPS)
' rock% Rocker: &H30=Button A0 (automatic mode), &H10=Button A1 (manual mode), &H70=Button B0 (dim light up), &H50=Button B1 (dim light down)
' Return negative on error, returns enum
' &H30, &H10, &H50 &H70
FUNCTION eoRxF60203(tp%,da$,oda$,st%,rock%)
 LOCAL n%,id%
 n%=eoRxF6(tp%,da$,oda$,db0%,id%,st%)
 IF n% < 0 THEN
  eoRxF60203=-1
  EXIT FUNCTION
 ENDIF
 rock%=(db0% and &h70)
 eoRxF60203=rock%
END FUNCTION

' Callback eoRxRPS helper function for 2-Rocker
' F6-02-04
' It receives the RPS telegram and parses the rocker states
' Receive Rocker Switch, 2 Rocker, page 15
' We get type info and two bits on status which help us to interpret
' Depending on switch type press and release events can be parsed
' tp%    type of the packet (from callback eoRxRPS)
' da$    data array
' oda$   optional data array
' st%    status  (from callback eoRxRPS)
' bow%  0=released, 1=pressed
' rocka0% Rocker a0: 0=not pressed, 1=pressed
' rocka1% Rocker a0: 0=not pressed, 1=pressed
' rockb0% Rocker b0: 0=not pressed, 1=pressed
' rockb1% Rocker b1: 0=not pressed, 1=pressed
' Return negative on error, return state 1=pressed or 0=released 
' &H30, &H20, &H10 &H00
FUNCTION eoRxF60204(tp%,da$,oda$,st%,bow%,bc%,rocka0%,rocka1%,rockb0%,rockb1%)
 LOCAL n%,id%
 n%=eoRxF6(tp%,da$,oda$,db0%,id%,st%)
 IF n% < 0 THEN
  eoRxF60203=-1
  EXIT FUNCTION
 ENDIF
 bow%=(db0% and &H80)/128
 bc%=(db0% and &H40)/64
 rocka0%=(db0% and &h01)
 rocka1%=(db0% and &h02)/2
 rockb0%=(db0% and &h04)/4
 rockb1%=(db0% and &h08)/8
 eoRxF60204=rock%
END FUNCTION

' Callback eoRxRPS helper function for 4-Rocker
' F6-03-01
' It receives the RPS telegram and parses the rocker states
' We get type info and two bits on status which help us to interpret
' Depending on switch type press and release events can be parsed
' tp%    type of the packet (from callback eoRxRPS)
' da$    data array
' oda$   optional data array
' st%    status  (from callback eoRxRPS)
' rock1% Rocker 1: 0=Button A1, 1=Button A0, 2=Button B1, 3=Button B0, 4=Button C1, 5=Button C0, 6=Button D1, 7=Button D0, -1=invalid
' bow%  0=released, 1=pressed
' rock2% Rocker 2: 0=Button A1, 1=Button A0, 2=Button B1, 3=Button B0, 4=Button C1, 5=Button C0, 6=Button D1, 7=Button D0, -1=invalid
' ac%    0= No 2nd action, 1=2nd action valid
' num%   number of buttons 0=no button, 1= 2 buttons..7=8 buttons, -1=invalid
' Return negative on error, return value state of T21 and NU (required for interpretation)
' 0,1 and -1 on error
FUNCTION eoRxF60301(tp%,da$,oda$,st%,rock1%,bow%,rock2%,num%,ac%)
 LOCAL n%,id%
 n%=eoRxF6(tp%,da$,oda$,db0%,id%,st%)
 IF n% < 0 THEN
  eoRxF60301=-1
  EXIT FUNCTION
 ENDIF
 eoRxF60301=-1
 rock1%=-1
 rock2%=-1
 ac%=-1
 num%=-1
 bow%=-1
 select case (st% and &h30)
  case &H10 'T21=0, NU = 1   
   rock1%=(db0% and &he0)/32
   bow%=(db0% and &h10)/16
   rock2%=(db0% and &h0e)/2
   ac%=(db0% and &h1)   
   eoRxF60301=1
  case &H00 'T21=0, NU = 0   
   num%=(db0% and &he0)/32
   bow%=(db0% and &h10)/16
   eoRxF60301=0
 end select
END FUNCTION

' Callback eoRxRPS helper function for 4-Rocker
' F6-03-02
' It receives the RPS telegram and parses the rocker states
' We get type info and two bits on status which help us to interpret
' Depending on switch type press and release events can be parsed
' tp%    type of the packet (from callback eoRxRPS)
' da$    data array
' oda$   optional data array
' st%    status  (from callback eoRxRPS)
' rock1% Rocker 1: 0=Button A1, 1=Button A0, 2=Button B1, 3=Button B0, 4=Button C1, 5=Button C0, 6=Button D1, 7=Button D0, -1=invalid
' bow%  0=released, 1=pressed
' rock2% Rocker 2: 0=Button A1, 1=Button A0, 2=Button B1, 3=Button B0, 4=Button C1, 5=Button C0, 6=Button D1, 7=Button D0, -1=invalid
' ac%    0= No 2nd action, 1=2nd action valid
' num%   number of buttons 0=no button, 1= 2 buttons..7=8 buttons, -1=invalid
' Return negative on error, return value state of T21 and NU (required for interpretation)
' 0,1 and -1 on error
FUNCTION eoRxF60302(tp%,da$,oda$,st%,rock1%,bow%,rock2%,num%,ac%)
 LOCAL n%,id%
 n%=eoRxF6(tp%,da$,oda$,db0%,id%,st%)
 IF n% < 0 THEN
  eoRxF60301=-1
  EXIT FUNCTION
 ENDIF
 eoRxF60301=-1
 rock1%=-1
 rock2%=-1
 ac%=-1
 num%=-1
 bow%=-1
 select case (st% and &h30)
  case &H10 'T21=0, NU = 1   
   rock1%=(db0% and &he0)/32
   bow%=(db0% and &h10)/16
   rock2%=(db0% and &h0e)/2
   ac%=(db0% and &h1)   
   eoRxF60302=1
  case &H00 'T21=0, NU = 0   
   num%=(db0% and &he0)/32
   eoRxF60302=0
 end select
END FUNCTION

' Callback eoRxRPS helper function for Keycard
' F6-04-01
' It receives the RPS telegram and parses the keycard states
' We get type info and two bits on status which help us to interpret
' Depending on switch type press and release events can be parsed
' tp%    type of the packet (from callback eoRxRPS)
' da$    data array
' oda$   optional data array
' st%    status  (from callback eoRxRPS)
' kc%   key card, 112=inserted, 0=taken out
' returns:
' 0,1 and -1 on error
FUNCTION eoRxF60401(tp%,da$,oda$,st%,kc%)
 LOCAL n%,id%
 n%=eoRxF6(tp%,da$,oda$,db0%,id%,st%)
 IF n% < 0 THEN
  eoRxF60401=-1
  EXIT FUNCTION
 ENDIF
 eoRxF60401=-1
 kc%=-1
 select case (st% and &h30)
  case &H30 'T21=1, NU = 1   
   kc% = db0%
   eoRxF60401=0
  case &H20 'T21=1, NU = 0   
   kc% = db0%
   eoRxF60401=1
 end select
END FUNCTION

' Callback eoRxRPS helper function for Keycard
' F6-04-02
' It receives the RPS telegram and parses the keycard states
' We get type info and two bits on status which help us to interpret
' Depending on switch type press and release events can be parsed
' tp%    type of the packet (from callback eoRxRPS)
' da$    data array
' oda$   optional data array
' st%    status  (from callback eoRxRPS)
' bow%   energy box
' bc%    button coding 0=button
' soc%   state of the card 0=taken out, 1=inserted
' returns:
' 0,1 and -1 on error
FUNCTION eoRxF60402(tp%,da$,oda$,st%,bow%,bc%,soc%)
 LOCAL n%,id%
 n%=eoRxF6(tp%,da$,oda$,db0%,id%,st%)
 IF n% < 0 THEN
  eoRxF60402=-1
  EXIT FUNCTION
 ENDIF
 eoRxF60402=0
 bow%=(db0% and &H80)/128
 bc%=(db0% and &H40)/64
 soc%=(db0% and &H04)/4
END FUNCTION

' Callback eoRxRPS helper function for window handle
' F6-10-00
' It receives the RPS telegram and parses the window handle
' We get type info and two bits on status which help us to interpret
' tp%    type of the packet (from callback eoRxRPS)
' da$    data array
' oda$   optional data array
' st%    status  (from callback eoRxRPS)
' win%   movement of the window handle
' returns:
' 0 to 2, -1 on error, 0= moved to left or right, 1=moved to down, 2=moved to up
FUNCTION eoRxF61000(tp%,da$,oda$,st%,win%)
 LOCAL n%,id%
 n%=eoRxF6(tp%,da$,oda$,db0%,id%,st%)
 IF n% < 0 THEN
  eoRxF61000=-1
  EXIT FUNCTION
 ENDIF
 eoRxF61000=-1
 win%=-1
 select case (st% and &H30)
  case &H20 'T21=1, NU = 0   
   IF (db0% and &HD0) = &HC0 THEN
    ' Moved from up to left
	' Moved from down to left
    ' Moved from up to right
    ' Moved from down to right
	win% = db0%
	eoRxF61000=0
   ELSE IF (db0% and &HF0) = &HF0 THEN
    ' Moved from right to down
	' Moved from left to down
	win% = db0%
	eoRxF61000=1
   ELSE IF (db0% and &HF0) = &HD0 THEN
    ' Moved from left to up
	' Moved from right to up
	win% = db0%
	eoRxF61000=2
  ENDIF
 end select
END FUNCTION

' Callback eoRxRPS helper function for window handle
' F6-10-01
' It receives the RPS telegram and parses the window handle
' We get type info and two bits on status which help us to interpret
' tp%    type of the packet (from callback eoRxRPS)
' da$    data array
' oda$   optional data array
' st%    status  (from callback eoRxRPS)
' win%   movement of the window handle
' returns:
' 0 to 2, -1 on error, 0= moved to left or right, 1=moved to down, 2=moved to up
FUNCTION eoRxF61001(tp%,da$,oda$,st%,hc%,hvl%)
 LOCAL n%,id%
 n%=eoRxF6(tp%,da$,oda$,db0%,id%,st%)
 IF n% < 0 THEN
  eoRxF61001=-1
  EXIT FUNCTION
 ENDIF
 eoRxF61001=-1
 hc%=(db0% and 64)/64
 hvl%=-1
 IF (db0% and &H0D) = &H0C THEN
  ' Moved from up to left
  ' Moved from up to right
  ' Moved from down to left
  ' Moved from down to right
  hvl% = db0% and &H0F
  eoRxF61001=0
 ELSE IF (db0% and &H0F) = &H0F THEN
  ' Moved from right to down
  ' Moved from left to down
  hvl% = db0% and &H0F
  eoRxF61001=1
 ELSE IF (db0% and &H0F) = &H0D THEN
  ' Moved from left to up
  ' Moved from right to up  
  hvl% = db0% and &H0F
  eoRxF61001=2
 ENDIF
END FUNCTION

' Callback eoRxRPS helper function for Leakage detector
' F6-05-01
' It receives the RPS telegram and parses the keycard states
' We get type info and two bits on status which help us to interpret
' Depending on switch type press and release events can be parsed
' tp%    type of the packet (from callback eoRxRPS)
' da$    data array
' oda$   optional data array
' st%    status  (from callback eoRxRPS)
' was%   alert signal that the sensor detected water leakage, 0x11 = water detected
' 0 and -1 on error
FUNCTION eoRxF60501(tp%,da$,oda$,st%,was%)
 LOCAL n%,id%
 n%=eoRxF6(tp%,da$,oda$,db0%,id%,st%)
 IF n% < 0 THEN
  eoRxF60501=-1
  EXIT FUNCTION
 ENDIF
 eoRxF60501=-1
 select case (st% and &h30)
  case &H30 'T21=1, NU = 1   
   was% = db0%
   eoRxF60501=0
 end select
END FUNCTION

' Callback eoRx1BS helper function for Contact and Switches
' D5-00-01
' It receives the 1BS telegram and parses the contact state
' tp%    type of the packet (from callback eoRxRPS)
' da$    data array
' oda$   optional data array
' lrn%   learn button 0=pressed, 1=not pressed
' co%   contact 0=open, 1=closed
FUNCTION eoRxD50001(tp%,da$,oda$,lrn%,co%)
 LOCAL n%,id%
 n%=eoRxD5(tp%,da$,oda$,db0%,id%,st%)
 IF n% < 0 THEN
  eoRxD50001=-1
  EXIT FUNCTION
 ENDIF
 lrn%=(db0% and 8)/8
 co%=(db0% and 1)
 eoRxD50001=co%
END FUNCTION

' Callback eoRx4BS helper function for temperature and humidity sensor
' A5-02-01 -40..0 degree Celsius
' A5-02-02 -30..+10
' A5-02-03 -20..+20
' A5-02-04 -10..+30
' A5-02-05 0..+40
' A5-02-06 10..+50
' A5-02-07 20..+60
' A5-02-08 30..+70
' A5-02-09 40..+80
' A5-02-0A 50..+90
' A5-02-0B 60..+100
' A5-02-10 -60..+20
' A5-02-11 -50..+30
' A5-02-12 -40..+40
' A5-02-13 -30..+50
' A5-02-14 -20..+60
' A5-02-15 -10..+70
' A5-02-16 0..+80
' A5-02-17 10..+90
' A5-02-18 20..+100
' A5-02-1a 40..+120
' A5-02-1b 50..+130
' A5-02-20 -10..+41.2
' A5-02-30 -40..+62.3
' It receives the 4BS telegram and parses the temperature and humidity sensor
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 01,02,03,...,30
' tmp    temperature see above degree C
' lrn%   learn button 0=pressed, 1=not pressed
FUNCTION eoRxA502xx(tp%,da$,oda$,xx%,tmp,lrn%)
 LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA502xx=-1
  EXIT FUNCTION
 ENDIF
 lrn%=(db0% and 8)/8
 IF xx%>=&H01 AND xx%<=&H0B THEN
  tmp=(255-db1%)/40+(xx%-1)*10-40
 ELSEIF xx%>=&H10 AND xx%<=&1B THEN
  tmp=(255-db1%)/80+(xx%-&H10)*10-60
 ELSEIF xx%=&H20 THEN
  tmp = (1024-(db1%+((db2% AND 3)*256)))/1023*51.2-10
 ELSEIF xx%=&H21 THEN
  tmp = (1024-(db1%+((db2% AND 3)*256)))/1023*102.3-40
 ELSE
  ' unknown
  eoRxA502xx=-2
  EXIT FUNCTION
 ENDIF 
 eoRxA502xx=0
END FUNCTION

' Callback eoRx4BS helper function for Temperature and Humidity Sensor
' A5-04-01 0..40 degree C 8 bit, (Vitocomfort 200 7554507)
' A5-04-02 -20..60 degree C 8 bit, (Eltako)
' A5-04-03 -20..60 degree C 10bit, (ITEC)
' It receives the 4BS telegram and parses the temperature and humidity sensor
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 01,02,03
' hum    humidity 0..100%
' tmp    temperature 0..40 degree C
' lrn%   learn button 0=pressed, 1=not pressed
' ts%   temperatur sensor 1=available, 0=not available (A5-04-01 and A5-04-02 only)
' ttp%  telegram type (A5-04-03 only)
FUNCTION eoRxA504xx(tp%,da$,oda$,xx%,hum,tmp,lrn%,ts%,ttp%)
 LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA504xx=-1
  EXIT FUNCTION
 ENDIF
 lrn%=(db0% and 8)/8
 SELECT CASE xx%
  CASE &H01
   tmp = (40/250)*db1%
   hum = (100/250)*db2%
   ts%=(db0% and 2)/2
   ttp%=-1
  CASE &H02
   tmp = (80/250)*db1%-20
   hum = (100/250)*db2%
   ts%=(db0% and 2)/2
   ttp%=-1
  CASE &H03
   tmp = (80/1023)*(db1%+((db2% AND 3)*256))-20
   hum = (100/255)*db2%
   ttp%=(db0% and 1)
   ts%=-1
  CASE ELSE
   ' unknown
   eoRxA504xx=-2
   EXIT FUNCTION
 END SELECT
 eoRxA504xx=0
END FUNCTION

' Callback eoRx4BS helper function for Barometric Sensor
' A5-05-01 500..1150 hPa
' It receives the 4BS telegram and parses the barometric pressure
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 01
' bar    pressure in hPa
' lrn%   learn button 0=pressed, 1=not pressed
' ttp%  telegram type
FUNCTION eoRxA505xx(tp%,da$,oda$,xx%,bar,lrn%,ttp%)
 LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA505xx=-1
  EXIT FUNCTION
 ENDIF
 lrn%=(db0% and 8)/8
 IF xx%=&H01 THEN
  bar=(650/1023)*db2%+500
  ttp%=(db0% and 1)
 ELSE
  ' unknown
  eoRxA505xx=-2
  EXIT FUNCTION
 ENDIF 
 eoRxA505xx=0
END FUNCTION

' Callback eoRx4BS helper function for Light Sensor
' A5-06-01 600..60000 and 300..30000 lux (two ranges, check rs%)
' A5-06-02 0..1020 and 0..510 lux (two ranges, check rs%)
' A5-06-03 0..1000 lux (10-bit measurement), (Lutuo Technology)
' A5-06-04 0..65535 lux (Echoflex Solutions)
' A5-06-05 0..10200 and 0..5100 lux (ITEC)
' It receives the 4BS telegram and parses the ligth intensity
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 01,02,03,04,05
' su     supply voltage 0 to 5.1 Volts 
' ill1, ill2  Illumination
' rs%    range select, used to select the range according to ill1 (0) or ill2 (1) 
' lrn%   learn button 0=pressed, 1=not pressed
' temp   ambient temperature (A5-06-04 only)
' sv     energy storage (A5-06-04 only)
' tav%   temperature availability 1=available, 0=not available (A5-06-04 only)
' enav%  energy storage availability 1=available, 0=not available (A5-06-04 only)
FUNCTION eoRxA506xx(tp%,da$,oda$,xx%,su,ill1,ill2,rs%,lrn%,temp,sv,tav%,enav%)
  LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA506xx=-1
  EXIT FUNCTION
 ENDIF
 ill1=-1
 ill2=-1
 temp=-1
 tav%=-1
 enav%=-1
 lrn%=(db0% and 8)/8
 rs%=-1
 IF xx%=&H01 THEN
  ill1=(5940/255)*db1%+600
  ill2=(29700/255)*db2%+300
  su=(5.1/250)*db3%
  rs%=db0% and 1
 ElSE IF xx%=&H02 THEN
  ill1=(1020/255)*db1%
  ill2=(510/255)*db2%
  su=(100/250)*db3%
  rs%=db0% and 1
 ElSE IF xx%=&H03 THEN
  ill1=db2%+((db1% AND 3)*256)
  su=(100/250)*db3%
 ElSE IF xx%=&H04 THEN
  ill1=db1%+(db2%*256)
  temp=(80/255)*db3%-20
  sv=(100/15)*(db0% AND 240)
  tav%=(db0% AND 2)/2
  enav%=db0% AND 1
 ElSE IF xx%=&H05 THEN
  ill1=(10200/255)*db1%
  ill2=(5100/255)*db2%
  su=(5.1/250)*db3%
  rs%=db0% and 1
 ELSE
  ' unknown
  eoRxA506xx=-2
  EXIT FUNCTION
 ENDIF 
 eoRxA506xx=0
END FUNCTION

' Callback eoRx4BS helper function for Occupancy Sensor
' A5-07-01 Occupancy with Supply voltage monitor (PIR On/Off)
' A5-07-02 Occupancy with Supply voltage monitor
' A5-07-03 Occupancy with Supply voltage monitor (10-bit illumination measurement)
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 01,02,03
' su     supply voltage 0 to 5.0 Volts 
' lrn%   learn button 0=pressed, 1=not pressed
' pirs%  PIR status 0..127: PIR off, 128..255: PIR on (A5-07-01)
' pirs%  PIR status 1: Motion detected, 0: Uncertain of occupancy status (A5-07-02 & A5-07-03) 
' sva%   Supply voltage availability 1: Supply voltage is supported, 0: Supply voltage is not supported
' ill    Illumination range: 0..1000 lux (A5-07-03 only)
FUNCTION eoRxA507xx(tp%,da$,oda$,xx%,su,lrn%,pirs%,sva%,ill)
  LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA507xx=-1
  EXIT FUNCTION
 ENDIF
 lrn%=(db0% and 8)/8
 su=(5.0/250)*db3%
 pirs%=-1
 sva%=-1
 ill=-1
 IF xx%=&H01 THEN
  pirs%=db1%
  sva%=db0% AND 1
 ELSEIF xx%=&H02 THEN
  pirs%=(db0% AND 128)/128
 ELSEIF xx%=&H03 THEN
  ill=db2%+((db1% AND 3)*256)
  pirs%=(db0% AND 128)/128
 ELSE
  ' unknown
  eoRxA507xx=-2
  EXIT FUNCTION
 ENDIF 
 eoRxA507xx=0
END FUNCTION

' Callback eoRx4BS helper function for Light, Temperature and Occupancy Sensor
' A5-08-01 0..510 lux, 0..51 degree C, Occupancy button
' A5-08-02 0..1020 lux, 0..51 degree C, Ocuppancy button
' A5-08-03 0..1530 lux, -30..+50 degree C, Occupancy button
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 01,02,03
' su     supply voltage 0 to 5.0 Volts 
' ill    Illumination
' temp   Temperature
' lrn%   learn button 0=pressed, 1=not pressed
' pirs%  PIR status 1=PIR off, 0=PIR
' occ%   Occupation button 1=released, 0=pushed
FUNCTION eoRxA508xx(tp%,da$,oda$,xx%,su,ill,temp,lrn%,pirs%,occ%)
 LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA508xx=-1
  EXIT FUNCTION
 ENDIF
 lrn%=(db0% and 8)/8
 su=(5.1/255)*db3%
 pirs%=(db0% AND 2)/2
 occ%=db0% AND 1
 ill=-1
 temp=-1
 IF xx%=&H01 OR xx%=&H02 THEN
  ill=(510*xx%/255)*db2%
  temp=(51/255)*db1%
 ELSE IF xx%=&H03 THEN
  ill=(1530/255)*db2%
  temp=(80/255)*db1%-30
 ELSE
  ' unknown
  eoRxA508xx=-2
  EXIT FUNCTION
 ENDIF 
 eoRxA508xx=0
END FUNCTION

' Callback eoRx4BS helper function for Gas Sensor
' A5-09-02 CO Sensor 0..1020 ppm
' A5-09-04 CO2 Sensor 0..2550 ppm, 0..+51 degree c
' A5-09-05 VOC Sensor 0..65535 ppb
' A5-09-06 Radon Sensor 0..1023 Bq/m3
' A5-09-07 Particles Sensor 0..511 μg/m3 (PM10: Dust<10μm, PM2.5: Dust<2.5μm, PM1: Dust<1μm)
' A5-09-08 Pure CO2 Sensor 0..2000 ppm
' A5-09-09 Pure CO2 Sensor with Power Failure detection 0..2000 ppm
' A5-09-0A Hydrogen Gas Sensor -20..+60 degree c, 0..65535 ppm 
' A5-09-0B Radioactivity Sensor 0..6553 according to
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 02,04,05,..,0B
' su     supply voltage 0 to 5.0 Volts 
' conc   Gas concentration in ppm
' temp   Temperature
' hum    Humidity
' vocID% VOC identification 
'         0= VOCT (total),      1= Formaldehyde,        2= Benzene,          3= Styrene,
'         4= Toluene,           5= Tetrachloroethylene, 6= Xylene,           7= n-Hexane,
'         8= n-Octane           9= Cyclopentane,        10= Methanol,        11= Ethanol,
'         12= 1-Pentanol,       13= Acetone,            14= ethylene Oxide   15= Acetaldehyde ue,
'         16= Acetic Acid,      17= Propionice Acid     18= Valeric Acid,    19= Butyric Acid,
'         20= Ammoniac,         22= Hydrogen Sulfide,   23= Dimethylsulfide, 24= 2-Butanol (butyl Alcohol)
'         25= 2-Methylpropanol, 26= Diethyl ether,      255= ozone
' act%   Radon activity
' pm10%, pm25%, pm1% Particles 10, 2.5, 1 um
' ract%  Radioactivity level
' lrn%   learn button 0=pressed, 1=not pressed
' ts%    T-Sensor 1= Temperature Sensor available 0= Temperature Sensor not available
' hs%	 H-Sensor 1= Humidity Sensor available 0= Humidity Sensor not available
' scm%   Scale multiplier for A5-09-05: 0= 0.01, 1= 0.1, 2= 1, 3= 10
'                         for A5-09-0B: 0= 0.001, 1= 0.01, 2= 0.1, 3= 1, 4= 10, 5= 100, 6= 1000, 7= 10000, 8= 100000
' pm10a%,pm25a%, pm1% Particles 10, 2.5, 1 um active bit
' pfd%   Power failure detection 1= Power failure detected, 0= Power failure not detected
' tsa%   Temperature sensor availability 1= Temp sensor is supported, 0= Temp sensor is not supported
' sva%   Supply voltage availability 1: Supply voltage is supported, 0: Supply voltage is not supported
' vu%    Value of radiation unit 0= μSv/h, 1= cpm, 2= Bq/L, 3= Bq/kg
FUNCTION eoRxA509xx(tp%,da$,oda$,xx%,su,conc,temp,hum,vocID%,act%,pm10%,pm25%,pm1%,ract%,lrn%,ts%,hs%,scm%,pm10a%,pm25a%,pm1a%,pfd%,tsa%,sva%,vu%)
  LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA509xx=-1
  EXIT FUNCTION
 ENDIF
 su=-1
 conc=-1
 temp=-1
 hum=-1
 vocID%=-1
 act%=-1
 pm10%=-1
 pm25%=-1
 pm1%=-1
 ract%=-1
 lrn%=(db0% and 8)/8
 ts%=-1
 hs%=-1
 scm%=-1
 pm10a%=-1
 pm25a%=-1
 pm1a%=-1
 pdf%=-1
 tsa%=-1
 sva%=-1
 vu%=-1
 IF xx%=&H02 THEN
  su=(5.1/255)*db3%
  conc=(1020.0/255.0)*db2%
  temp=(51.0/255.0)*db1%
  ts%=(db0% AND 2)/2
 ELSE IF xx%=&H04 THEN
  hum=(1.0/2.0)*db3%
  conc=10.0*db2%
  temp=(51.0/255.0)*db1%
  ts%=(db0% AND 2)/2
  hs%=(db0% AND 4)/4
 ELSE IF xx%=&H05 THEN
  conc=(db3%*256)+db2%
  vocID%=db1%
  scm%=(db0% AND 3)/3
 ELSE IF xx%=&H06 THEN
  act%=(db3%*4)+((db2% AND 192)/64)
 ELSE IF xx%=&H07 THEN
  pm10%=(db3%*2)+((db2% AND 128)/128)
  pm25%=((db2% AND 127)*4)+((db1% AND 192)/64)
  pm1%=((db1% AND 63)*8)+((db0% AND 224)/32)
  pm10a%=(db0% AND 4)/4
  pm25a%=(db0% AND 2)/2
  pm1a%=db0% AND 1
 ELSE IF xx%=&H08 THEN
  conc=(2000.0/255.0)*db1%
 ELSE IF xx%=&H09 THEN
  conc=(2000.0/255.0)*db1%
  pfd%=(db0% AND 4)/4
 ELSE IF xx%=&H0A THEN
  conc=(db3%*256)+db2%
  temp=(80.0/255.0)*db1%-20.0
  su=(3.0/15.0)*((db0% AND 240)/16)+2.0
  tsa%=(db0% AND 2)/2
  sva%=db0% AND 1
 ELSE IF xx%=&H0B THEN
  su=(3.0/15.0)*((db3% AND 240)/16)+2.0
  ract%=(6553.0/65535.0)*(db2%+db1%)
  scm%=(db0% AND 240)/16
  vu%=(db0% AND 6)/2
  sva%=db0% AND 1
 ELSE
  ' unknown
  eoRxA509xx=-2
  EXIT FUNCTION
 ENDIF 
 eoRxA509xx=0
END FUNCTION

' Callback eoRx4BS helper function for Room Operating Panel
' A5-10-01 Temperature Sensor, Set Point, Fan Speed and Occupancy Control: 0..+40 degree c
' A5-10-02 Temperature Sensor, Set Point, Fan Speed and Day/Night Control: 0..+40 degree c
' A5-10-03 Temperature Sensor, Set Point Control: 0..+40 degree c
' A5-10-04 Temperature Sensor, Set Point and Fan Speed Control: 0..+40 degree c
' A5-10-05 Temperature Sensor, Set Point and Occupancy Control: 0..+40 degree c
' A5-10-06 Temperature Sensor, Set Point and Day/Night Control: 0..+40 degree c
' A5-10-07 Temperature Sensor, Fan Speed Control: 0..+40 degree c
' A5-10-08 Temperature Sensor, Fan Speed and Occupancy Control: 0..+40 degree c
' A5-10-09 Temperature Sensor, Fan Speed and Day/Night Control: 0..+40 degree c
' A5-10-0A Temperature Sensor, Set Point Adjust and Single Input Contact: 0..+40 degree c
' A5-10-0B Temperature Sensor and Single Input Contact: 0..+40 degree c
' A5-10-0C Temperature Sensor and Occupancy Control: 0..+40 degree c
' A5-10-0D Temperature Sensor and Day/Night Control
' A5-10-10 Temperature and Humidity Sensor, Set Point and Occupancy Control: 0..+40 degree c, 0..100% (humidity)
' A5-10-11 Temperature and Humidity Sensor, Set Point and Day/Night Control: 0..+40 degree c, 0..100% (humidity)
' A5-10-12 Temperature and Humidity Sensor and Set Point: 0..+40 degree c, 0..100% (humidity)
' A5-10-13 Temperature and Humidity Sensor, Occupancy Control: 0..+40 degree c, 0..100% (humidity)
' A5-10-14 Temperature and Humidity Sensor, Day/Night Control: 0..+40 degree c, 0..100% (humidity)
' A5-10-15 10 Bit Temperature Sensor, 6 bit Set Point Control: -10 to 41.2 degree c, 0..63 (SP)
' A5-10-16 10 Bit Temperature Sensor, 6 bit Set Point Control, Occupancy Control: -10 to 41.2 degree c, 0..63 (SP)
' A5-10-17 10 Bit Temperature Sensor, Occupancy Control: -10 to 41.2 degree c, 0..63 (SP)
' A5-10-18 Illumination, Temperature Set Point, Temperature Sensor, Fan Speed and Occupancy Control: 0..1000 lux, 0..+40 degree c
' A5-10-19 Humidity, Temperature Set Point, Temperature Sensor, Fan Speed and Occupancy Control: 0..+40 degree c
' A5-10-1A Supply voltage monitor, Temperature Set Point, Temperature Sensor, Fan Speed and Occupancy Control: 0..5 V, 0..+40 degree c
' A5-10-1B Supply Voltage Monitor, Illumination, Temperature Sensor, Fan Speed and Occupancy Control: 0..5 V, 0..1000 lux, 0..+40 degree c
' A5-10-1C Illumination, Illumination Set Point, Temperature Sensor, Fan Speed and Occupancy Control: 0..1000 lux, 0..+40 degree c
' A5-10-1D Humidity, Humidity Set Point, Temperature Sensor, Fan Speed and Occupancy Control: 0..+40 degree c
' A5-10-1E Supply Voltage Monitor, Illumination, Temperature Sensor, Fan Speed and Occupancy Control: 0..5 V, 0..1000 lux, 0..+40 degree c
' A5-10-1F Temperature Sensor, Set Point, Fan Speed, Occupancy and Unoccupancy Control: 0..+40 degree c
' A5-10-20 Temperature and Set Point with Special Heating States: 0..+40 degree c
' A5-10-21 Temperature, Humidity and Set Point with Special Heating States: 0..+40 degree c
' A5-10-22 Temperature, Setpoint, Humidity and Fan Speed: 0..+40 degree c
' A5-10-23 Temperature, Setpoint, Humidity, Fan Speed and Occupancy: 0..+40 degree c
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 02,04,05,..,0B
' fan%	 Turn-switch for fan speed: 210..255= Auto Stage, 190..209= Stage 0, 165..189= Stage 1, 145..164= Stage 2, 0..144= Stage 3
' sp%	 Set point
' temp   Temperature
' hum    Humidity
' ill    Illumination
' tempsp Temperature Set point
' su     Supply Voltage 0..5 volts
' illsp  Illumination Set Point
' tempf% Temperature flag 0= Temperature absent, 1= Temperature present
' spf%   Set point flag 0= Set point absent, 1= Set point present
' fanf%  Fan speed flag 0= Fan speed absent, 1= Fan speed present
' spm%   Set point mode 0= Room temperature defined by SP, 1= Frost protection, 2= Automatic control, 3= Reserved
' batt%  Battary state 0= Battery ok, 1= Battery low
' lrn%   learn button 0=pressed, 1=not pressed
' sw%    switch button for A5-10-01, A5-10-05, A5-10-08, A5-10-0C, A5-10-10, A5-10-13, A5-10-15..17, A5-10-1F (Occupancy button: 0= Button pressed, 1= Button released)
'         A5-10-02, A5-10-06, A5-10-09, A5-10-0D, A5-10-11, A5-10-14 (Slide switch O/I: 0= Position I/Night/Off, 1= Position O/Day/On)
'         A5-10-0A, A5-10-0B (Contact state: 0= closed, 1= open)
' oed%   Occupancy enable/disable 0= Occupancy enabled, 1= Occupancy disabled
' ob%    Occupancy button 0= Button pressed, 1= Button released
' unocc% Unoccupancy button 0= Button pressed, 1= Button released
' act%   User activity 0= No user action, 1= User interaction
' occ%   Occupancy button 0= Button pressed, 1= Button released
FUNCTION eoRxA510xx(tp%,da$,oda$,xx%,fan%,sp%,temp,hum,ill,tempsp,su,illsp,tempf%,spf%,fanf%,spm%,batt%,lrn%,sw%,oed%,ob%,unocc%,act%,occ%)
  LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA510xx=-1
  EXIT FUNCTION
 ENDIF
 fan%=-1
 sp%=-1
 temp=-1
 hum=-1
 ill=-1
 tempsp=-1
 su=-1
 illsp=-1
 tempf%=-1
 spf%=-1
 fanf%=-1
 spm%=-1
 batt%=-1
 lrn%=(db0% AND 8)/8
 sw%=-1
 oed%=-1
 ob%=-1
 unocc%=-1
 act%=-1
 occ%=-1
 IF xx%>=&H01 AND xx%<=&H0D THEN
  temp=(40.0/-255.0)*(db1%-255)
  IF xx%=&H01 OR xx%=&H02 OR xx%=&H04 OR (xx%>=&H07 AND xx%<=&H09) THEN fan%=db3%
  IF (xx%>=&H01 AND xx%<=&H06) OR xx%=&H0A THEN sp%=db2%
  IF xx%=&H01 OR xx%=&H02 OR xx%=&H05 OR xx%=&H06 OR (xx%>=&H08 AND xx%<=&H0B) THEN sw%=db0% AND 1
 ELSE IF xx%>=&H10 AND xx%<=&H14 THEN
  temp=(40.0/250.0)*db1%
  hum=(100.0/250.0)*db2%
  IF xx%>=&H10 OR xx%<=&H12 THEN
   sp%=db3%
  ELSE IF xx%=&H13 THEN
   sw%=db0% AND 1
  ENDIF
 ELSE IF xx%>=&H15 AND xx%<=&H17 THEN
  temp=(51.2/1023.0)*(1023-(((db2% AND 3)*256)+db1%))-10.0
  IF xx%=&H15 OR xx%=&H16 THEN 
   sp%=(db2% AND 252)/4
  ENDIF 
  IF xx%=&H16 OR xx%=&H17 THEN
   sw%=db0% AND 1
  ENDIF 
 ELSE IF xx%>=&H18 AND xx%<=&H1E THEN
  temp=(40.0/250.0)*(250-db1%)
  fan%=(db0% AND 112)/16
  oed%=(db0% AND 2)/2
  ob%=db0% AND 1
  IF xx%>=&H18 AND xx%<=&H1A THEN 
   tempsp=(40.0/250.0)*(250-db2%)
  ENDIF 
  IF xx%=&H18 OR xx%=&H1B OR xx%=&H1E THEN 
   ill=4*db3%
  ENDIF 
  IF xx%=&H19 THEN 
   hum=(100.0/250.0)*db3%
  ENDIF
  IF xx%=&H1A OR xx%=&H1B OR xx%=&H1E THEN 
   su=(5.0/250.0)*db3%
  ENDIF 
  IF xx%=&H1C THEN
   ill=1000.0/250.0*db3%
   illsp=1000.0/250.0*db2%
  ELSE IF xx%=&H1D THEN
   hum=100.0/250.0*db3%
   humsp=100.0/250.0*db2%
  ENDIF
 ELSE IF xx%=&H1F THEN
  fan=db3%
  sp=db2%
  temp=(40.0/255.0)*(255-db1%)
  tempf%=(db0% AND 64)/64
  spf%=(db0% AND 32)/32
  fanf%=(db0% AND 16)/16
  unocc%=(db0% AND 2)/2
  sw%=db0% AND 1
 ELSE IF xx%>=&H20 AND xx%<=&H23 THEN
  sp%=db3%
  temp=(40.0/250.0)*db1%
  IF xx%=&H20 THEN
   spm%=(db0% AND 96)/32
   batt%=(db0% AND 32)/32
   act%=db0% AND 1
  ELSE IF xx%=&H21 THEN
   spm%=(db0% AND 96)/32
   hum=(100.0/250.0)*db2%
   batt%=(db0% AND 32)/32
   act%=db0% AND 1
  ELSE IF xx%=&H22 THEN
   hum=(100.0/250.0)*db2%
   fan%=(db0% AND 224)/32
  ELSE IF xx%=&H23 THEN
   hum=(100.0/250.0)*db2%
   fan%=(db0% AND 224)/32
   occ%=db%0 AND 1
  ENDIF
 ELSE
  ' unknown type
  eoRxA510xx=-2
  EXIT FUNCTION
 ENDIF 
 eoRxA510xx=0
END FUNCTION

' Callback eoRx4BS helper function for Controller Status
' A5-11-01 Light Controller 0..510 lux
' A5-11-02 Temperature Controller Output
' A5-11-03 Blind Status 0..180°
' A5-11-04 Extending Lighting Status
' A5-11-05 Dual-Channel Switch Actuator (BI-DIR)
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 01,02,..,05
' ill	 illumination 
' isp%   illumination set point
' dim%   dimming output level
' rep%   repeater 1= enabled, 0= disabled
' prt%   power relay timer 1= enabled, 0= disabled
' dhv%   dylight harvesting 1= enabled, 0= disabled
' edim%  dimmimg 1= dimming load, 0= switching load
' cvar   control variable
' fan%   actual value of fan       0= Stage 0 Manual,      1= Stage 1 Manual,	      2= Stage 2 Manual
'	    3= Stage 3 Manual,     16= Stage 0 Automatic,  17= Stage 1 Automatic,     18= Stage 2 Automatic, 
'	    19= Stage 3 Automatic, 255= Not Available
' asp    actual set point 0 to 51.2 degree c
' alr%   alarm 1= alarm, 0= no alarm
' ctm%   actual state of controller 1= heating, 2= cooling, 3= off
' cst%   controller state 1= override, 0= automatic
' bsp%   blind/shutter pos. 
' as%    angle sign 1= negative sign, 0= positive sign
' an     angle
' pvf%   position value flag 1= position value available, 0= no Position value available
' avf%   angle value flag 1= angle value available, 0= no Angle value available
' es%    error state 0= no error present, 1= end-positions are not configured, 2= internal failure, 3= not used
' ep%    end-position 0= no end-position available, 1= no end-position reached, 2= blind fully open, 3= blind fully closed
' st%    status 0: No Status available 1= blind is stopped, 2= blind opens, 3= blind closes
' sm%    service mode 1= service mode is activated (for example for maintenance), 0= normal mode
' motp%  mode of the position  1= inverse mode: 100% blind fully open/0% blind fully close, 0= Normal mode: 0% blind fully open/100% blind fully close,1
' p1%    parameter 1: Mode 0= Dimm-Value (0..255), Mode 1= R-Red (0..255), Mode 2= energy metering value (MSB 15..8), Mode 3= not used
' p2%    parameter 2: Mode 0= lamp operating hours (MSB 15..8), Mode 1= G-Green (0..255), Mode 2= energy metering value (7..0 LSB), Mode 3= not used
' p3%    parameter 3: Mode 0: Lamp operating hours (7..0 LSB)
'           Mode 1: B-Blue (0..255)
'	    Mode 2: Unit for energy values: 0= mW, 1= W, 2= kW, 3= MW, 4= Wh, 5 = kWh, 6= MWh, 7= GWh, 8= mA, 9= 1/10 A, 10= mV, 11= 1/10 V, 12..15 not used
'           Mode 3= not used
' ohf%   operation hours flag 1= lamp operating hours available, 0= no lamp operating hours available
' wm%    working mode of current actuator 0b001= mode 1, 0b010= mode 2, 0b011= mode 3, 0b100= mode 4
' lrn%   learn button 1=teach-in telegram, 0=data telegram
' mgc%   magnet contact 1= closed, 0= opened
' occ%   occupancy 1= occupied, 0= inoccupied
' pwr%   Power relay 1= on, 0= off
' erh%   energy hold-off 1= energy hold-off/dew point, 0= normal
' ro%    room occupancy 0= occupied, 1= unoccupied, 2= standBy, 3= frost
' pm%    parameter mode 0= 8-bit dimmer value and lamp operating hours, 1= RGB Value, 2= energy metering value, 3= not used
' dir%   dirction 1= gateway request telegram; from gateway to actuator, 2 = actuator status report; from actuator to gateway
' rs%    relay status 0b00: CH1 off, CH2 off, 0b01= CH1 on, CH2 off, 0b10= CH1 off, CH2 on, 0b11= CH1 on, CH2 on
' mt%    message type 0= request (direction 1), 1= status report (direction 2) 
FUNCTION eoRxA511xx(tp%,da$,oda$,xx%,ill,isp%,dim%,rep%,prt%,dhv%,edim%,cvar,fan%,asp,alr%,ctm%,cst%,bsp%,as%,an,pvf%,avf%,es%,ep%,st%,sm%,motp%,p1%,p2%,p3%,ohf%,wm%,lrn%,mgc%,occ%,pwr%,erh%,ro%,pm%,dir%,mt%,rs%)
 LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA511xx=-1
  EXIT FUNCTION
 ENDIF
 ill=-1
 isp%=-1
 dim%=-1
 rep%=-1
 prt%=-1
 dhv%=-1
 edim%=-1
 cvar=-1
 fan%=-1
 asp=-1
 alr%=-1
 ctm%=-1
 cst%=-1
 bsp%=-1
 as%=-1
 an=-1
 pvf%=-1
 avf%=-1
 es%=-1
 ep%=-1
 st%=-1
 sm%=-1
 motp%=-1
 p1%=-1
 p2%=-1
 p3%=-1
 ohf%=-1
 wm%=-1
 lrn%=(db0% AND 8)/8
 mgc%=-1
 occ%=-1
 pwr%=-1 
 erh%=-1
 ro%=-1
 pm%=-1
 dir%=-1
 mt%=-1
 rs%=-1
 IF xx%=&H01 THEN
  ill=(510.0/255.0)*db3%
  isp%=db2%
  dim%=db1%
  rep%=(db0% AND 128)/128
  prt%=(db0% AND 64)/64
  dhv%=(db0% AND 32)/32
  edim%=(db0% AND 16)/16
  mgc%=(db0% AND 4)/4
  occ%=(db0% AND 2)/2
  per%=db0% AND 1
 ELSE IF xx%=&H02 THEN
  cvar=(100.0/255.0)*db3%
  fan%=db2%
  asp=(51.2/255.0)*db1%
  alr%=(db0% AND 128)/128
  ctm%=(db0% AND 96)/32
  cst%=(db0% AND 16)/16
  erh%=(db0% AND 4)/4
  ro%=db0% AND 3
 ELSE IF xx%=&H03 THEN
  bsp%=db3%
  as%=(db2% AND 128)/128
  an=(180.0/90.0)*(db2% AND 128)
  pvf%=(db1% AND 128)/128
  avf%=(db1% AND 64)/64
  es%=(db1% AND 48)/16
  ep%=(db1% AND 12)/4
  st%=db1% AND 3
  sm%=(db0% AND 128)/128
  motp%=(db0% AND 64)/64
 ELSE IF xx%=&H04 THEN
  p1%=db3%
  p2%=db2%
  p3%=db1%
  sm%=(db0% AND 128)/128
  ohf%=(db0% AND 64)/64
  es%=(db0% AND 48)/16
  pm%=(db0% AND 6)/2
  st%=db0% AND 1
 ELSE IF xx%=&H05 THEN
  IF dir%=1 THEN mt%=db0% AND 1
  ELSEIF dir%=2 THEN
   wm%=(db0% AND 112)/16
   rs%=(db0% AND 6)/2
   mt%=db0% AND 1
  ELSE
   ' unknown
   eoRxA511xx=-2
   EXIT FUNCTION
  ENDIF
 ELSE
  ' unknown
  eoRxA511xx=-3
  EXIT FUNCTION
 ENDIF 
 eoRxA511xx=0
END FUNCTION

' Callback eoRx4BS helper function for Automated Meter Reading (AMR)
' A5-12-00 Counter
' A5-12-01 Electricity
' A5-12-02 Gas
' A5-12-03 Water
' A5-12-04 Temperature and Load Sensor -40..+40 degree Celcius
' A5-12-05 Temperature and Container Sensor -40..+40 degree Celcius
' A5-12-10 Current meter 16 channels
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 00,01,..,05,10
' mr     meter reading (scale is according to div%, unit is according to dt%)
' temp   temperature -40..+40 degree Celcius
' ps0%   position sensor 0
' ps1%   position sensor 1
' ps2%   position sensor 2
' ps3%   position sensor 3
' ps4%   position sensor 4
' ps5%   position sensor 5
' ps6%   position sensor 6
' ps7%   position sensor 7
' ps8%   position sensor 8
' ps9%   position sensor 9
' lrn%   learn button 1=teach-in telegram, 0=data telegram
' div%   divisor for value (used to set the scale of rm) 
'          0: x/1    => 0..16777215 
'          1: x/10   => 0..1677721.5
'	   2: x/100  => 0..167772.15
'	   3: x/1000 => 0..16777.215
' dt%    data type 0: Cumulative value, 1: Current value
'          0: 1,    1: 1/s      (A5-12-00)
'          0: kWh,  1: W        (A5-12-01)
'          0: m3,   1: liter/s  (A5-12-02 & A5-12-03)
'	   0: A.h.  1: mA       (A5-12-10)
' ch%    measurement channel (A5-12-00 & A5-12-10 only)
' ti%    tariff info (A5-12-01 & A5-12-02 & A5-12-03)
' bl%    battery level 0: 100-75%, 1: 75-50%, 2: 50-25%, 3: 25-0% (A5-12-04 & A5-12-05 only)
FUNCTION eoRxA512xx(tp%,da$,oda$,xx%,mr,temp,ps0%,ps1%,ps2%,ps3%,ps4%,ps5%,ps6%,ps7%,ps8%,ps9%,lrn%,div%,dt%,ti%,ch%,bl%)
 LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA512xx=-1
  EXIT FUNCTION
 END IF
 mr=-1
 temp=-1
 ps0%=-1
 ps1%=-1
 ps2%=-1
 ps3%=-1
 ps4%=-1
 ps5%=-1
 ps6%=-1
 ps7%=-1
 ps8%=-1
 ps9%=-1 
 lrn%=(db0% AND 8)/8
 div%=-1
 dt%=-1
 ch%=-1
 ti%=-1
 bl%=-1
 IF xx%>=&H00 AND xx%<=&H03 OR xx%=&H10 THEN
  div%=db0% AND 3
  mr=((16777215.0/(10.0^div%))/16777215.0)*((db3%*65536)+(db2%*256)+db1%)
  dt%=(db0% AND 4)/4
  IF xx%=&H00 OR xx%=&H10 THEN ch%=(db0% AND 240)/16
  ELSE ti%=(db0% AND 240)/16
  ENDIF
 ELSE IF xx%=&H04 OR xx%=&H05 THEN
  temp=((80.0/255.0)*db1%)-40.0
  bl%=db0% AND 3
  IF xx%=&H04 THEN mr=(db3%*64)+((db2% AND 252)/4)
  ELSE
   ps0%=(db3% AND 128)/128
   ps1%=(db3% AND 64)/64
   ps2%=(db3% AND 32)/32
   ps3%=(db3% AND 16)/16
   ps4%=(db3% AND 8)/8
   ps5%=(db3% AND 4)/4
   ps6%=(db3% AND 2)/2
   ps7%=db3% AND 1
   ps8%=(db2% AND 128)/128
   ps9%=(db2% AND 64)/64
  ENDIF
 ELSE
  ' unknown type
  eoRxA512xx=-2
  EXIT FUNCTION
 ENDIF 
 eoRxA512xx=0
END FUNCTION

' Callback eoRx4BS helper function for Environmental Applications
' A5-13-01 Weather Station 0..999 lx, -40..+80 degree celcius, 0..70 m/s
' A5-13-02 Sun Intenity 0..150 klx
' A5-13-03 Data Exchange
' A5-13-04 Time and Day Exchange
' A5-13-05 Direction Exchange 
' A5-13-06 Geographic Position Exchange
' A5-13-07 Wind Sensor
' A5-13-08 Rain Sensor
' A5-13-10 Sun Position and Radiation
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 00,01,..,05,10
' dws    dawn sensor 
' temp   temperature
' wnd    wind speed
' id%    identifier
' snw    sun-west
' sns    sun-south
' sne    sun-east
' dy%    day (1..31)
' mth%   month (1..12)
' yr%    year (2000..2099)
' wdy%   weekday 1: Monday, 2: Tuesday, 3: Wednesday, 4: Thursday, 5: Friday, 6: Saturday, 7: Sunday
' hr%    hours (0..23)
' min%   minutes (0..59)
' sec%   seconds (0..59)
' elv%   elevation -90..+90 degree
' azm%   azimuth 0..359 degree
' latm   latitude MSB -90..+90 degree
' lotm   longitude MSB -180..+180
' latl   latitude LSB -90..+90 degree
' lotl   longitude LSB -180..+180
' wd%    wind direction 0: NNE 1: NE, 2: ENE, 3: E, 4: ESE, 5: SE, 6: SSE, 7: S, 
'          8: SSW, 9: SW, 10: WSW, 11: W, 12: WNW, 13: NW, 4: NNW, 15: N
' aws    average wind speed 1 to 199.9 mph
' mws    maximum wind speed 1 to 199.9 mph
' ras%   rainfall adjust sign 0: negative, 1: positive
' rfa%   rainfall adjust 0 to 39: 0 to 3.9 %, 40 to 63: reserved
' rfc%   rainfall count 0..65535
' snelv% sun elevation 0..90 degree
' sna%   sun azimuth -90..+90 degree
' sram%  solar radiation MSB 0..2000 W/m2
' lrn%   learn button 1=teach-in telegram, 0=data telegram
' dn%    day/night 0: day, 1: night
' ran%   rain indicator 0: no rain, 1: rain
' hem%   hemisphere 0:north, 1: south
' src%   source 0: Real Time Clock, 1: GPS or equivalent (e.g. DCF77, WWV)
' tmf%   time format 0: 24-hour, 1: 12-hour
' apm%   AM/PM 0: AM, 1: PM
' bs%    battery status 0: battery OK, 1: battery low
' sral%  solar radiation LSB 0..2000 W/m2
FUNCTION eoRxA513xx(tp%,da$,oda$,xx%,dws,temp,wnd%,id%,snw,sns,sne,dy%,mth%,yr%,wdy%,hr%,min%,sec%,elv%,azm%,latm,lotm,latl,lotl,wd%,aws,mws,ras%,rfa%,rfc%,snelv%,sna%,sram%,lrn%,dn%,ran%,hem%,src%,tmf%,apm%,bs%,sral%)
 LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA513xx=-1
  EXIT FUNCTION
 ENDIF
 dws=-1
 temp=-1
 wnd=-1
 id%=-1
 snw=-1
 sns=-1
 sne=-1
 dy%=-1
 mth%=-1
 yr%=-1
 wdy%=-1
 hr%=-1
 min%=-1
 sec%=-1
 elv%=-1
 azm%=-1
 latm=-1
 lotm=-1
 latl=-1
 lotl=-1
 wd%=-1
 aws=-1
 mws=-1
 ras%=-1
 rfa%=-1
 rfc%=-1
 snelv%=-1
 sna%=-1
 sram%=-1
 lrn%=(db0% AND 8)/8
 dn%=-1
 ran%=-1
 hem%=-1
 src%=-1
 tmf%=-1
 apm%=-1
 bs%=-1
 sral%=-1
 IF xx%>=&H01 AND xx%<=&H06 OR xx%=&H10 THEN
  id%=(db0% AND 240)/16
  IF xx%=&H01 THEN
   dws=(999.0/255.0)*db3%
   temp=(120.0/255)*db2%-40
   wnd=(70.0/255.0)*db1%
   dn%=(db0% AND 4)/4
   ran%=(db0% AND 2)/2
  ELSE IF xx%=&H02 THEN
   snw=(150.0/255.0)*db3%
   sns=(150.0/255.0)*db2%
   sne=(150.0/255.0)*db1%
   hem%=(db0% AND 4)/4
  ELSE IF xx%=&H03 THEN
   dy%=db3% AND 31
   mth%=db2% AND 15
   yr%=db1% And 127
   src%=db0% AND 1
  ELSE IF xx%=&H04 THEN
   wdy%=(db3% AND 224)/32
   hr%=db3% AND 31
   min%=db2% AND 31
   sec%=db1% AND 31
   tmf%=(db0% AND 4)/4
   apm%=(db0% AND 2)/2
   src=db0% AND 1
  ELSE IF xx%=&H05 THEN
   elv%=db3%-90
   azm%=((db2% AND 1)*256)+db1%
  ELSE IF xx%=&H06 THEN
   latm=((180.0/4095.0)*(db3% AND 240)/16)-90
   lotm=((360.0/4095.0)*(db3% AND 15))-180
   latl=((180.0/4095.0)*db2%)-90
   lotl=((360.0/4095.0)*db1%)-180
  ELSE IF xx%=&H10 THEN
   snelv%=(db3% AND 255)/2
   dn%=db3% AND 1
   sna%=db2%-90
   sram%=db1%
   sral%=db0% AND 7
 ELSE IF xx%=&H07 THEN
  wd%=db3% AND 15
  aws=(198.9/255)*db2%+1
  mws=(198.9/255)*db1%+1
  bs%=db0% AND 1
 ELSE IF xx%=&H08 THEN
  ras%=(db3% AND 64)/64
  rfa%=db3% AND 63
  rfc%=(db2%*256)+db1%
 ELSE
  ' unknown type
  eoRxA513xx=-3
  EXIT FUNCTION
 ENDIF 
 eoRxA513xx=0
END FUNCTION

' Callback eoRx4BS helper function for Multi-Func Sensors
' A5-14-01 Single Input Contact (Window/Door), Supply voltage monitor
' A5-14-02 Single Input Contact (Window/Door), Supply voltage monitor and Illumination (0..1000 lx)
' A5-14-03 Single Input Contact (Window/Door), Supply voltage monitor and Vibration
' A5-14-04 Single Input Contact (Window/Door), Supply voltage monitor, Vibration and Illumination (0..1000 lx)
' A5-14-05 Vibration/Tilt, Supply voltage monitor
' A5-14-06 Vibration/Tilt, Illumination and Supply voltage monitor (0..1000 lx)
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 01,02,..,06
' svc    supply voltage 0 to 0.5 volts
' ll     illumination
' lrn%   learn button 1=teach-in telegram, 0=data telegram
' ct%    contact 0b0: Contact closed, 0b1: Contact open
' vib%   vibration 0b0: No vibration detected, 0b1: Vibration detected
FUNCTION eoRxA514xx(tp%,da$,oda$,xx%,svc,ill,lrn%,ct%,vib%)
 LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA514xx=-1
  EXIT FUNCTION
 ENDIF
 svc=(5.0/250.0)*db3%
 ill=-1
 lrn%=(db0% AND 8)/8
 ct%=-1
 vib%=-1
 IF xx%>=&H01 AND XX%<=&H04 THEN ct%=db0% AND 1
 IF xx%=&H02 OR xx%=&H04 OR xx%=&H05 THEN ill=(1000.0/250.0)*db2%
 IF xx%>=&H03 AND xx%<=&H06 THEN vib%=(db0% AND 2)/2
 ELSE
  ' unknown type
  eoRxA514xx=-2
  EXIT FUNCTION
 ENDIF 
 eoRxA514xx=0
END FUNCTION

' Callback eoRx4BS helper function for HVAC Components
' A5-20-01 Battery Powered Actuator (BI-DIR) DIR:2-0..+40 degree C Temperature Setpoint
' A5-20-02 Basic Actuator (BI-DIR) 
' A5-20-03 Line powered Actuator (BI-DIR) 0..+40 degree C Temperature/Temperature Setpoint
' A5-20-04 Heating Radiator Valve Actuating Drive with Feed and Room Temperature Measurement, Local Set Point Control and Display (BI-DIR) 
'            DIR-1: +20..+80 degree C Temperature/ +10..+30 degree C Temperature Setpoint
'            DIR-2: +10..+30 degree C Temperature Setpoint
' A5-20-10 Generic HVAC Interface (BI-DIR)
' A5-20-11 Generic HVAC Interface – Error Control (BI-DIR) DIR-2: 0..65535 error code
' A5-20-12 Temperature Controller Input Setpoint Shift: -10..+10 degree K
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 01,02,..,04,10,11,12
' dir%   direction DIR-1 = Transmit mode: Message from the actuator to the controller
'           DIR-2 = Receive mode: Commands from the controller to the actuator; max. reponse time 1 sec.
' cv%    current value
' so%    service 1: on
' enie%  energy input 1: true (enabled)
' es%    energy storage 1: true (suffeciently charged)
' bcap%  battery capacity 0: true
' cco%   constant, cover open 1: true
' fts%   failure temperature sensor 1: true (out of range)
' dwo%   detection 1: true (window open)
' aco%   acuator 1: true (obstracted)
' temp   temperature 0..+40 degree C (A5-20-01, A%-20-03)
' sp     valve position 0..100% OR temperature setpoint 0..+40 degree C (depending on sps%)          
' rin%   run init sequence 1: true (end position (valve zero point) has been reached)
' lfs%   lift set 1: true (initialization = the valve is completelyopened and closed)
' vo%    valve open/maintenance 1: true (After receiving an operation command, the actuator moves the valve in direction open or close. 
'           when reaching the end position, an automatic switch-off procedure is started. In service mode the valve can be set to open or closed always.)
' vc%    valve closed 1: true (valve is closed)
' sb%    summer bit 1: true (reduction of energy consumption)
' sps%   set point select 0: Valve position (0-100%). Unit respond to controller 1: Temperature set point 0...40°C Unit respond to room sensor and use internal PI loop
' spn%   set point inverse 1: true (inverted valve set point) (A5-20-01)
' rcu%   selection function 0: RCU (Room controller-unit), 1: service on
' av     actual value
' spi%   set point inverse 1: true (inverted set point. Default state to be define as per product manufacturer)
' vsp%   valve set point
' ats%   actuator/temperature setpoint 0..100% actuator setpoint OR 0..+40 degree C temperature setpoint (depending on sps%)
' tmprc  temperature actual from RCU 0..+40 degree C
' cp%    current position
' ftts   feed temperature/temperature setpoint +20..+80 degree C (feed temperature) OR +10..+30 degree C (temperature setpoint)
' tmpfc  room temperature/failure code +10..+30 degree C (room temperature) 
'           OR	0..16: Reserved,                17: Measurement error, 18: Battery empty,    19: Reserved, 
'		20: Frost protection,           21..32: Reserved,      33: Blocked valve,    34..35: Reserved, 
'		36: End point detection error,  37..39: Reserved,      40: No valve,         41..48: Reserved, 
' 		49: Not taught in,              50..52: Reserved,      53: No response from controller, 
'               54: Teach-in error,             55..255: Reserved (depending on fl%)
' mst%   measurement status 0: feed temperature or room temperature is active, 1: feed temperature or room temperature is active
' str%   status request 0: no change, 1: status requested
' pos%   valve position
' tsp    temperature setpoint +10..+30 degree C
' mc%    measurement control 0: enabled, 1: disabled
' wuc%   wake-up cycle 
'           0: 10 sec,        1: 60 sec,            2: 90 sec,         3: 120 sec,            4: 150 sec,     5: 180 sec,           
' 	    6: 210 sec        7: 240 sec,           8: 270 sec,        9: 300 sec (5 min),    10: 330 sec,    11: 360 sec,    
'           12: 390 sec,      13: 420 sec,          14: 450 sec,       15: 480 sec,           16: 510 sec,    17: 540 sec,   
'	    18: 570 sec,      19: 600 sec (10 min), 20: 630 sec,       21: 660 sec,           22: 690 sec,    23: 720 sec,
'           24: 750 sec,      25: 780 sec,          26: 810 sec,       27: 840 sec,           28: 870 sec,    29: 900 sec (15 min)
'	    30: 930 sec,      31: 960 sec,          32: 990 sec,       33: 1020 sec,          34: 1050 sec,   35: 1080 sec
'  	    36: 1110 sec,     37: 1140 sec,         38: 1170 sec,      39: 1200 sec (20 min), 40: 1230 sec,   41: 1260 sec, 
'           42: 1290 sec,     43: 1320 sec,         44: 1350 sec,      45: 1380 sec,          46: 1410 sec,   47: 1440 sec, 
'           48: 1470 sec,     49: 1500 sec (25 min),50: 3 hrs,         51: 6 hrs,             52: 9 hrs,      53: 12 hrs, 
'           54: 15 hrs,       55: 18 hrs,           56: 21 hrs,        57: 24 hrs,            58: 27 hrs,     59: 30 hrs, 
'	    60: 33 hrs,       61: 36 hrs,           62: 39 hrs,        63: 42 hrs (max)
' dso%   display orientation 0: 0°, 1: 90°, 2: 180°, 3: 270°
' md%    mode 0: Auto,          1: Heat,                2: Morning Warmup,         3: Cool,           4: Night Purge,      5: Precool,     
'           6: Off,             7: Test,                8: Emergency Heat,         9: Fan only,       10: Free cool,       11: Ice,                  
'           12: Max heat,       13: Economic heat/cool, 14: Dehumidification (dry),15: Calibration,   16: Emergency cool,  17: Emergency steam,
'	    18: max cool,       19: Hvc load,           20: no load,               21..30: reserved,  31: Auto Heat,       32: Auto Cool,
'           33..254: reserved,  255: N/A
' vps%   vane position 
'	    0: Auto,         1: Horizontal,        2: Pos2,            3: Pos3,              4: Pos4,           5: Vertical,
'           6: Swing,        7..10: Reserved,      11: Vertical swing, 12: Horizontal swing, 13: Horizontal and vertical swing, 
'           14: Stop swing,  15: N/A
' fansp% fan speed 0: Auto, 1..14: Up to 14 fan speeds being 1 the lowest, 15: N/A
' cvar%  control variable 0..100%
' exds%  external disablement 0: not disabled, 1: disabled
' err%   error code 
' res%   reserved (0b0000)
' od%    other disablement 0: not disabled, 1: disabled
' wcd%   window contact disablement 0: not disabled, 1: disabled
' kcd%   key card disablement 0: not disabled, 1: disabled
' ed%    external disablement 0: not disabled, 1: disabled
' cvo    control variable override 0..100%
' spsh   setpoint shift -10..+10 degree K
' fanor% fan override 0: Automatic, 1: Override Fan DB2
' ctm%   controller mode 0: Auto mode, 1: Heating, 2: Cooling, 3: Off
' cst%   controller state 0: Automatic, 1: Override control variable DB3
' lrn%   learn button 1: teach-in telegram, 0: data telegram
' bls%   button lock status 0: buttons unlocked, 1: buttons locked
' ts%    temperature selection 0: Feed temperature, 1: Temperature set point
' fl%    failure detection 0: no failure (temperature transmitted), 1: failure (failure code transmitted)
' blc%   button lock control 0: unlocked, 1: locked
' ser%   service command 0: No change, 1: Open valve, 2: Run initialisation, 3: Close valve
' ro%    room occupancy 
'	    A5-20-10: 0: Occupied,                      1: StandBy (waiting to perform action), 
'                     2: Unoccupied (action performed), 3: Off (no occupancy and no action)
'           A5-20-12: 0: Occupied,                      1: Unoccupied,
'                     2: StandBy,                       3: Frost
' oi%    on/off 0: off (the unit is not running), 1: on
' rdc%   disable remote controller 0: Enable Remote, controller, 1: Disable Remote controller
' wc%    window constact 0: windows opened, 1: windows closed
' as%    alarm state 0: OK, 1: error
' erh%   energy hold-off/dew point 0: Normal, 1: Energy hold-off/ Dew point
FUNCTION eoRxA520xx(tp%,da$,oda$,xx%,dir%,cv%,so%,enie%,es%,bcap%,cco%,fts%,dwo%,aco%,temp,sp,rin%,lfs%,vo%,vc%,sb%,sps%,spn%,rcu%,av,spi%,vps%,ats%,tmprc,cp%,ftts%,tmpfc%,mst%,str%,pos%,tsp%,mc%,wuc%,dso%,md%,vps%,fansp%,cvar%,exds%,err%,res%,od%,wcd%,kcd%,ed%,cvo,spsh,fanor%,ctm%,cst%,lrn%,bls%,ts%,fl%,blc%,ser%,ro%,oi%,rdc%,wc%,as%,erh%)
 LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA520xx=-1
  EXIT FUNCTION
 ENDIF
 cv%=-1
 so%=-1
 enie%=-1
 es%=-1
 bcap%=-1
 cco%=-1
 fts%=-1
 dwo%=-1
 aco%=-1
 temp=-1
 sp=-1
 rin%=-1
 lfs%=-1
 vo%=-1
 vc%=-1
 sb%=-1
 sps%=-1
 spn%=-1
 rcu%=-1
 av=-1
 spi%=-1
 vps%=-1
 ats%=-1
 tmprc=-1
 cp%=-1
 ftts%=-1
 tmpfc%=-1
 mst%=-1
 str%=-1
 pos%=-1
 tsp%=-1
 mc%=-1
 wuc%=-1
 dso%=-1
 md%=-1
 vps%=-1
 fansp%=-1
 cvar%=-1
 exds%=-1
 err%=-1
 res%=-1
 od%=-1
 wcd%=-1
 kcd%=-1
 ed%=-1
 cvo=-1
 spsh=-1
 fanor%=-1
 ctm%=-1
 cst%=-1
 lrn%=(db0% AND 8)/8
 bls%=-1
 ts%=-1
 fl%=-1
 blc%=-1
 ser%=-1
 ro%=-1
 oi%=-1
 rdc%=-1
 wc%=-1
 as%=-1
 erh%=-1
 IF xx%=&H01 THEN
  temp=(40.0/255.0)*db1%
  IF dir%=1 THEN
   cv%=db3%
   so%=(db2% AND 128)/128
   enie%=(db2% AND 64)/64
   es%=(db2% AND 32)/32
   bcap%=(db2% AND 16)/16
   cco%=(db2% AND 8)/8
   fts%=(db2% AND 4)/4
   dwo%=(db2% AND 2)/2
   aco%=db2% AND 1
  ELSE IF dir%=2 THEN
   rin%=(db1% AND 128)/128
   lfs%=(db1% AND 64)/64
   vo%=(db1% AND 32)/32
   vc%=(db1% AND 16)/16
   sb%=(db1% AND 8)/8
   sps%=(db1% AND 4)/4
   spn%=(db1% AND 2)/2
   rcu%=db1% AND 1
   IF sps%=0 THEN sp=db3%
   ELSE IF sps%=1 THEN sp=(40.0/255.0)*db3%
   ELSE
    ' unknown selector
    eoRxA520xx=-2
    EXIT FUNCTION
   ENDIF 
  ELSE
   ' unknown direction
   eoRxA520xx=-3
   EXIT FUNCTION
  ENDIF 
 ELSE IF xx%=&H02 THEN
  IF dir%=1 THEN
   av%=db3%
   spi%=(db1% AND 2)/2
  ELSE IF dir%=2 THEN 
   vsp%=db3%
   spi%=db1% AND 1
  ELSE
   ' unknown direction
   eoRxA520xx=-4
   EXIT FUNCTION
  ENDIF 
 ELSE IF xx%=&H03 THEN
  IF dir%=1 THEN
   av%=db3%
   temp=(40.0/255.0)*db1%
  ELSE IF dir%=2 THEN
   tmprc=(40.0/255.0)*db2%
   sps%=(db1% AND 4)/4
   spi%=(db1% AND 2)/2
   IF sps%=0 THEN ats=db3%
   ELSE IF sps%=1 THEN ats=(40.0/255.0)*db3%
   ELSE
    ' unknown set point selector
    eoRxA520xx=-5
    EXIT FUNCTION
   ENDIF
  ELSE
   ' unknown direction
   eoRxA520xx=-6
   EXIT FUNCTION
  ENDIF
 ELSE IF xx%=&H04 THEN
  IF dir%=1 THEN
   cp%=db3%
   mst%=(db0% AND 128)/128
   str%=(db0% AND 64)/64
   bls%=(db0% AND 4)/4
   ts%=(db0% AND 2)/2
   fl%=db0% AND 1
   IF ts%=0 THEN ftts=(60.0/255.0)*db2%+20
   ELSE IF ts%=1 THEN ftts=(20.0/255.0)*db2%+10   
   ELSE
    ' unknown temperature selsctor
    eoRxA520xx=-6
    EXIT FUNCTION
   ENDIF
   IF fl%=0 THEN tmpfc=(20.0/255.0)*db1%+10
   ELSE IF fl%=1 THEN tmpfc=db1%   
   ELSE
    ' unknown failure detector
    eoRxA520xx=-7
    EXIT FUNCTION
   ENDIF
  ELSE IF dir%=2 THEN
   pos%=db3%
   tsp=(20.0/255.0)*db2%+10
   mc%=(db1% AND 64)/64
   wuc%=db1% AND 63
   dso%=(db0% AND 48)/16
   blc%=(db0% AND 4)/4
   ser%=db0% AND 3
  ELSE
   ' unknown direction
   eoRxA520xx=-8
   EXIT FUNCTION
  ENDIF
 ELSE IF xx%=&H10 OR dir%=2 THEN
  IF dir%=1 THEN
   md%=db3%
   vps%=(db2% AND 240)/16
   fansp%=db2% AND 5
   cvar%=db1%
   ro%=(db0% AND 6)/2
   oi%=db0% AND 1
  ELSE
   ' unknown direction
   eoRxA520xx=-9
   EXIT FUNCTION
  ENDIF
 ELSE IF xx%=&H11 THEN
  IF dir%=1 THEN
   
  ELSE IF dir%=2 THEN
  ELSE
   ' unknown direction
   eoRxA520xx=-10
   EXIT FUNCTION
  ENDIF
 ELSE IF xx%=&H11 THEN
  IF dir%=1 THEN
   exds%=db1% AND 1
   drc%=(db0% AND 4)/4
   wc%=(db0% AND 2)/2
  ELSE IF dir%=2 THEN
   err%=(db3%*256)+db2%
   res%=(db1% AND 240)/16
   od%=(db1% AND 8)/8
   wcd%=(db1% AND 4)/4
   kcd%=(db1% AND 2)/2
   ed%=db1% AND 1
   rcd%=(db0% AND 4)4
   wc%=(db0% AND 2)/2
   as%=db0% AND 1
  ELSE
   ' unknown direction
   eoRxA520xx=-11
   EXIT FUNCTION
  ENDIF
 ELSE IF xx%=&H12 THEN
  cvo=(100.0/255.0)*db3%
  fansor%=db2%
  spsh=(20.0/255.0)*db1%+10
  fanor%=(db0% AND 128)/128
  ctm%=(db0% AND 96)/32
  cst%=(db0% AND 16)/16
  erh%=(db0% AND 4)4
  ro%=db0% AND 3
 ELSE
  ' unknown type
  eoRxA520xx=-12
  EXIT FUNCTION
 ENDIF 
 eoRxA520xx=0
END FUNCTION

' Callback eoRx4BS helper function for Digital Input
' A5-30-01 Single Input Contact, Battery Monitor
' A5-30-02 Single Input Contact
' A5-30-03 Four-Digital Inputs, Wake and Temperature 0..+40 degree C
' A5-30-04 Tree-Digital Inputs, 1 Digital Input 8 Bits
' A5-30-05 Single Input Contact, Retransmission, Battery Monitor
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 01,02,..,05
' scv%   supply voltage 0..120: Battery LOW, 121..255: Battery OK
' ips%   input state 
'           A5-30-01: 0..195: Contact closed, 196..255: Contact open
'           A5-30-02: 0: Contact closed, 1: Contact open
' temp   temperature 0..+40 degree C
' wa0%    status of wake signal 0: Low, 1: High
' di3%   digital input 3 0: Low, 1: High
' di2%   digital input 2 0: Low, 1: High
' di1%   digital input 1 0: Low, 1: High
' di0%   digital input 0 0: Low, 1: High
' dv0%   digital value-input 0..255
' vdd    supply voltage 0-3.3 volts
' st%    signal type 0: Normal signal, 1: Heart beat signal
' ios%   index of signals 0...127: Increment a counter by new telegram
' lrn%   learn button 1: teach-in telegram, 0: data telegram
FUNCTION eoRxA530xx(tp%,da$,oda$,xx%,scv%,ips%,temp,wa0%,di3%,di2%,di1%,di0%,dv0%,vdd,st%,ios%,lrn%)
 LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA530xx=-1
  EXIT FUNCTION
 ENDIF
 scv%=-1
 ips%=-1
 temp=-1
 wa0%=-1
 di3%=-1
 di2%=-1
 di1%=-1
 di0%=-1
 dv0%=-1
 vdd=-1
 st%=-1
 ios%=-1
 lrn%=(db0% AND 8)/8
 IF xx%=&H01 OR xx%=&H02 THEN
  svc%=db2%
  IF xx%=&H01 THEN ips%=db1%
  ELSE IF xx%=&H02 THEN ips%=db0% AND 1
  ENDIF
 ELSE IF xx%=&H03 THEN
  temp=(40.0/255.0)*db2%
  wa0%=(db1% AND 16)/16
  di3%=(db1% AND 8)/8
  di2%=(db1% AND 4)/4
  di1%=(db1% AND 2)/2
  di0%=db1% AND 1
 ELSE IF xx%=&H04 THEN
  dv0%=db1%
  di2%=(db0% AND 4)/4
  di1%=(db0% AND 2)/2
  di0%=db0% AND 1
 ELSE IF xx%=&H05 THEN
  vdd=(3.3/255.0)*db2%
  st%=(db2% AND 128)/128
  ios%=db1% AND 127
 ELSE
  ' unknown type
  eoRxA530xx=-2
  EXIT FUNCTION
 ENDIF 
 eoRxA530xx=0
END FUNCTION

' Callback eoRx4BS helper function for Energy Management
' A5-37-01 Demand Response
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 01 only
' tmpd%  temprory default
' spwru% absolute/relative power usage 
'           0: Absolute power usage. Interpret DB_2.BIT_6...DB_2.BIT_0 as a percentage of the maximum power use. 
'           1: Relative power usage. Interpret DB_2.BIT_6...DB_2.BIT_0 as a percentage of the current power use.
' pwru%  power usage 0% to 100% power usage in 1% increments;
' tmos   timeout setting 15..3825 minutes
' drl%   DR level
' lrn%   learn button 1: teach-in telegram, 0: data telegram
' rsd%   random start delay 0: false, 1: true
' red%   randomized end delay 0: false, 1: true
' mpwru% max/min power usage for default DR state 0: Minimum Power usage, 1: Maximum Power usage
FUNCTION eoRxA537xx(tp%,da$,oda$,xx%,tmpd%,spwru%,pwru%,tmos,drl%,lrn%,rsd%,red%,mpwru%)
 LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA537xx=-1
  EXIT FUNCTION
 ENDIF
 IF xx%=&H01 THEN
  tmpd%=db3%
  spwru%=(db2% AND 128)/128
  pwru%=db2% AND 127
  tmos=(3810.0/254.0)*(db1%-1)+15
  drl%=(db0% AND 240)/16
  lrn%=(db0% AND 8)/8
  rsd%=(db0% AND 4)/4
  red%=(db0% AND 2)/2
  mpwru%=db0% AND 1
 ELSE
  ' unknown type
  eoRxA537xx=-2
  EXIT FUNCTION
 ENDIF 
 eoRxA537xx=0
END FUNCTION

' Callback eoRx4BS helper function for Central Command
' A5-38-08 Gateway
' A5-38-09 Extended Lighting-Control
' tp%    type of the packet (from callback eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 01,02,..,04,10,11,12
' com%   command identifier
'           01: switching,           02: dimming,          03: setpoint shift,       04: basic setpoint, 
'           05: control variable,    06: fan stage,        07: blind central command
' tim    time 0.1-6553.5 sec
' edim   dimming value 0..100%
' rmp%   ramping time 0..255 sec
' sp     setpoint -12.7 to +12.8 K
' bsp    basic setpoint 0 to +51.2 degree C
' cvov   control variable override 0..100%
' cm%    control mode 0: Automatic mode selection, 1: Heating, 2: Cooling, 3: Off
' cs%    control state 0: automatic, 1: override
' fo%    fan stage override 0: Stage 0, 1: Stage 1, 2: Stage 2, 3: Stage 3, 255: Auto
' p1     function defined parameter 1 
'           A5-38-08 (command 0x07): 
'		Func. 00 to 03: not used
'		Func. 04: 0%..100% (e.g.: 0% = Blind fully open / 100% = Blind fully closed)
'		Func. 05: 0 ... 255 seconds
'		Func. 06: 0 ... 255 seconds
'		Func. 07: Runtime value to close the blind 0..255 seconds
'		Func. 08: Runtime value for the sunblind reversion time (This is the time to revolve the sunblind from one slat angle end position to the other end position: 0.0..25.5 seconds => 0.1s steps)
'		Func. 09: Set minimal position value 0..100%
'		Func. 10: Angle at the fully SHUT position Bit7 0 = positive sign, Bit7 1 = negative sign, Bit6..0 0..90, Angle in 2° steps (e.g. 0 = 0°, 90 = 180°)
'		Func. 11: Position logic 0 = Highest position = 0% / Lowest position = 100%, 1 = Highest position = 100% /Lowest position = 0%
' 	    A5-38-09: 
' 		Func. 00 to 05, 08, 11: not used
'		Func. 06: Dimm-Value (0..255)
' 		Func. 07: R - Red (0..255)
'		Func. 09: Dimm-Value (0..255)
'		Func. 10: Lamp operating hours (MSB 15..8)
'		Func. 12: Energy metering value (MSB 15..8)
' p2%    function defined parameter 2
'           A5-38-08 (command 0x07):
'               Func. 00 to 03, 08, 11: not used
'               Func. 04: Angel (see remark 1) Bit7 0 = positive sign, Bit7 1 = negative sign, Bit6..0 0..90, Angle in 2° steps
'               Func. 05: 0.0 to 25.5 seconds
'               Func. 06: 0.0 to 25.5 seconds
'               Func. 07: Runtime value to open the blind 0..255 seconds
'               Func. 09: Set maximal position value 0..100%
'               Func. 10: Angle at the fully OPEN position Bit7 0 = positive sign, Bit7 1 = negative sign, Bit6..0 0..90 Angle in 2° steps (e.g. 0 = 0°, 90 = 180°)
'	    A5-38-09:
'		Func. 00 to 02, 05, 08, 11: not used
'		Func. 03: Ramping time (MSB 15..8)
'		Func. 04: Ramping time (MSB 15..8) (65535 s)
' 		Func. 06: Ramping time (MSB 15..8) (65535 s)
' 		Func. 07: G - Green (0..255)
' 		Func. 09: Dimm-Value (0..255)
' 		Func. 10: Lamp operating hours (7..0 LSB)
' 		Func. 12: Energy metering value (7..0 LSB)
' p3%    function defined parameter 3
'	    A5-38-09: 
'		Func. 00 to 02, 05, 09, 10: -- not used --
' 		Func. 03: Ramping time (7..0 LSB) (65535 s)
' 		Func. 04: Ramping time (7..0 LSB) (65535 s)
'		Func. 06: Ramping time (7..0 LSB) (65535 s)
' 		Func. 07: B - Blue(0..255)
' 		Func. 08: Bit7: 0 = Drive to scene-value, Bit7: 1 = Stores actual value in the scene, Bit3..0: Scene number 0 ... 15
' 		Func. 11: Blocks the local operations: 0 = Unlock local operations, 1 = Locking switch on commands, 2 = Locking switch off commands, 3 = Locking local operations. 
' 		Func. 12: Unit of energy metering value: 0 = mW, 1 = W, 2 = kW, 3 = MW, 4 = Wh, 5 = kWh, 6 = MWh, 7 = GWh, 8 = mA, 9 = 1/10 A, 10 = mV, 11 = 1/10 V, 12..15 Not used
' func%  function:  
'           A5-38-08 (command 0x07):
'		0: Do nothing (status request),       1: Blind stops,      2: Blind opens,       3: Blind closes, 
'           	4: Blind drives to position with angle value (see remark 2, page 106),           5: Blind opens for time (position value) and angle (angle value)
'           	6: Blind closes for time (position value)and angle (angle value),                7: Set Runtime parameters (see remark 3, page 106),
'           	8: Set angle configuration (see remark 3, page 106),                             9: Set Min, Max values (see remark 4, page 106),
'           	10: Set slat angle for SHUT and OPEN position (see remark 5, page 107),          11: Set position logic (see remark 6)
'	    A5-38-09: 
'		0: Do nothing, status request,          1: Switched off,                             2: Switched on (Memory value)
'		3: Dimming up with ramping time,        4: Dimming down with ramping time,           5: Dimming stops
'		6: Set dimmer-value and ramping time,   7: Set RGB values (see remark 1, page 109),  8: Scene function (see remark 2, page 109)
'		9: Set minimal and maximal dimmer-value (see remark 3, page 109 & 110),              10: Set the operating hours of the lamp (see remark 4, page 110)
'		11: Locking local operations (see remark 5. page 110),                               12: Set a new value for the energy metering (overwrite the actual value with the selected unit)
' lrn%   learn button 0: data telegram, 1: teach-in telegram
' lck%   lock/unlock 0: unlock, 1: lock
' del%   delay/duration 0: delay, 1: duration
' sw%    switching command 0: off, 1: on 
' edimr% dimming range 0: absolute value, 1: relative value
' stv%   storage final value 0: no, 1: yes
' enho%  energy hold off 0: Normal, 1: Energy holdoff/ Dew point
' rmocc% room occupancy 0: Occupied, 1: Unoccupied, 2: Standby
' ssf%   send status flag 0: Send new status of device, 1: Send no status (e.g. Global central commands)
' paf%   position and angle flag 0: No Angle and position value available, 1: Angle and position value available
' smf%   service mode flag 0: Normal operation, 1: Service mode: The module disables all senders, except this sender, which has set the service mode. (For example for maintenance)
FUNCTION eoRxA538xx(tp%,da$,oda$,xx%,com%,tim,edim,rmp%,sp,bsp,cvov,cm%,cs%,fo%,p1%,p2%,p3%,func%,lrn%,lck%,del%,sw%,edimr%,stv%,enho%,rmocc%,ssf%,paf%,smf%)
 LOCAL n%,id%
 n%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n% < 0 THEN
  eoRxA538xx=-1
  EXIT FUNCTION
 ENDIF
 tim=1-
 edim=-1
 rmp%=-1
 sp=-1
 bsp=-1
 cvov=-1
 cm%=-1
 cs%=-1
 fo%=-1
 p1%=-1
 p2%=-1
 p3%=-1
 func%=-1
 lrn%=(db0% AND 8)/8
 lck%=-1
 del%=-1
 sw%=-1
 edimr%=-1
 stv%=-1
 enho%=-1
 rmocc%=-1
 ssf%=-1
 paf%=-1
 smf%=-1 
 IF xx%=&H08 THEN
  com%=db3%  
  IF com%=&H01 THEN
   tim=(6553.4/65534.0)*(((db2%*256)+db1%)-1.0)+0.1
   lck%=(db0% AND 4)/4
   del%=(db0% AND 2)/2 
   sw%=db0% AND 1
  ELSE IF com%=&H02 THEN
   edim=(100.0/255.0)*db2%
   rmp%=db1% 
   edimr%=(db0% AND 4)/4
   stv%=(db0% AND 2)/2
   sw%=db0% AND 1
  ELSE IF com%=&H03 THEN
   sp=(25.5/255.0)*db1%-12.7  
  ELSE IF com%=&H04 THEN
   bsp=(51.2/255.0)*db1%
  ELSE IF com%=&H05 THEN
   cvov=(100.0/255.0)*db1%
   cm%=(db0% AND 96)/32
   cs%+(db0% AND 16)/16
   enho%=(db0% AND 4)/4
   rmocc%=db0% AND 3
  ELSE IF com=&H06 THEN
   fo%=db1%
  ELSE IF com=&H07 THEN
   p1%=db2%
   p2%=db1%
   func%=(db0% AND 240)/16
   ssf%=(db0% AND 4)/4
   paf%=(db0% AND 2)/2
   smf%=db0% AND 1
  ELSE
   ' unknown command identidier
   eoRxA538xx=-2
   EXIT FUNCTION
  ENDIF 
 ELSE IF xx%=&H09 THEN
  p1%=db3%
  p2%=db2%
  p3%=db3%
  func%=(db0% AND 240)/16
  ssf%=(db0% AND 4)/4
  sfv%=(db0% AND 2)/2
  smf%=db0% AND 1
 ELSE
  ' unknown type
  eoRxA538xx=-3
  EXIT FUNCTION
 ENDIF 
 eoRxA538xx=0
END FUNCTION

' Callback eoRx1BS & eoRx4BS helper functions for Universal Types
' A5-3F-00 Radio Link Test (BI-DIR) 1BS master/slave messages, 4BS master/slave messages
' A5-3F-07 Universal type (defined by the manufacturer)
' tp%    type of the packet (from callback eoRx1BS/eoRx4BS)
' da$    data array
' oda$   optional data array
' xx%    type 00 only
' stcnt% sub-telegram counter related to RLT_MasterTest_4BS message received Repeater level 2
'           0: not supported, 1: 1 sub-telegram, 2: 2 sub-telegram, 3: >= 3 sub-telegram
' rslv%  RSSI level related to RLT_MasterTest_4BS message received Repeater level 1
'           0x00: not supported, 0x01: >=31 dBm, 0x02: -32 dBm, 0x3F: <=93 dBm
' stcrl% sub-telegram counter/RSSI level Related to RLT_MasterTest_4BS message received Repeater level 1 (see rslv%)
' rldl%  sub-telegram counter/RSSI level Related to RLT_MasterTest_4BS message received direct link (see rslv%)
' rlq%   RSSI level related to Non-EnOcean signal detection since last RLT_MasterTest message RSSI Level with 6dB quantization steps
'           0x00: not supported,      0x01: >= -31 dBm,       0x02: -32..-37 dBm,      0x03: -38..-43 dBm, 
'           0x04: -44..-49 dBm,       0x05: -50..-55 dBm,     0x06: -56..-61 dBm,      0x07: -62..-67 dBm, 
'           0x08: -68..-73 dBm,       0x09: -74..-79 dBm,     0x0A: -80..-85 dBm,      0x0B: <= -92 dBm
' mcm%   RLT msg-counter MSB covering all RLT_x_1BS messages 4 bit MSB
' lrn%   learn button 1: teach-in telegram, 0: data telegram
' msgid% message ID
' msgs%  message source 0: RLT-Master, 1: RLT-Slave
' mcl%   RLT msg-counter LSB covering all RLT_x_1BS messages 2 bit LSB
' undef% undefined telegram bits (defined by the manufacturer specific application)  
FUNCTION eoRxA53Fxx(tp%,da$,oda$,xx%,stcnt%,rslv%,rldl%,mcm%,lrn%,msgid%,msgs%,mcl%,undef%)
 LOCAL n4bs%,n1bs%,id%
 n1bs%=eoRxD5(tp%,da$,oda$,db0%,id%,st%)
 n4bs%=eoRxA5(tp%,da$,oda$,db0%,db1%,db2%,db3%,id%,st%)
 IF n1bs%<0 AND n4bs%<0 THEN
  eoRxA53Fxx=-1
  EXIT FUNCTION
 ENDIF
 stcnt%-1
 rslv%=-1
 rldl%=-1
 mcm%=-1
 lrn%=(db0% AND 8)/8
 msgid%=-1
 msgs%=-1
 mcl%=-1
 undef%=-1
 IF xx%=&H00 THEN 
  IF n1bs%=0 THEN
   ' this is a 1BS telegram
   msgs%=db0% AND 1
   IF msgs%=0 OR msgs%=1 THEN
    ' RLT master or slave
	mcm%=(db3% AND 240)/16
	mcl%=(db3% AND 6)/2
   ELSE  
    ' unknown message sourse
    eoRxA53Fxx=-2
    EXIT FUNCTION
   ENDIF
  ENDIF
  IF n4bs%=0 THEN
   ' this is a 4BS telegram 
   msgid%=(db0% AND 6)/2
   msgs%=db0% AND 1
   IF msgs%=0 THEN
    ' RLT master	
   ELSE IF msgs%=1 THEN
    ' RLT slave
	stcnt%=(db3% AND 192)/64
	rslv%=db3% AND 63
	stcrl%=db2%
	rldl%=db1%
	rlq%=(db0% AND 240)/16
   ELSE  
    ' unknown message sourse
    eoRxA53Fxx=-3
    EXIT FUNCTION
   ENDIF
  ENDIF
 ELSE IF xx%=&H7F THEN
  undef%=(db3%*16777216)+(db2%*65536)+(db1%*256)+(db0% AND 247)
 ELSE
  ' unknown type
  eoRxA53Fxx=-4
  EXIT FUNCTION
 ENDIF 
 eoRxA53Fxx=0
END FUNCTION

 ' Pressac Version 1 CT Clamp A5-12-01
 ' http://www.pressac.com/current-transducer-enocean-ct-clamp
 ' scale% = db0 AND 3 
 ' meter = (db3%*256 + db2%)*256 + db1%
 ' if scale% = 1 then
 '  meter = ((db3%*256 + db2%)*256 + db1%)*0.1
 ' else if scale% = 2 then
 '  meter = ((db3%*256 + db2%)*256 + db1%)*0.01
 ' else if scale% = 3 then
 '  meter = ((db3%*256 + db2%)*256 + db1%)*0.001
 ' else 
 '  meter = ((db3%*256 + db2%)*256 + db1%)
 ' endif
 ' cum% = db0% and 4
 ' lrn% =  not (db0% and 8)
 
 ' The following infos are taken from the Eltako documentation 
 ' referenced in the header (see page 10))
 ' Eltako FABH65S+FBH65B+FBH65S+FBH65TFB
 ' lux = db2% *2048.0/255.0
 ' lrn% = not (db0% and 8)
 ' motion% = not (db0% and 2)
 
 ' FAFT60+FIFT65S+FBH65TFB
 ' charge = db3% * 4.0 / 155.0
 ' humidity = db2% * 100.0 / 250.0
 ' temp = (db1% * 80.0 / 250.0)-20.0
 ' lrn% = not (db0% and 8)
 
 ' FAH60+FAH65S+FIH65S+FAH60B
 ' lux  = db3%*100.0
 ' lux2 = 300 + db2%*(30000-300)/255.0
 ' lrn% =  not (db0% and 8)
 
 ' FIH65B 
 ' lux = db2%*1024.0/255.0
 ' lrn% =  not (db0% and 8)
 
 ' FASM60+FSM14+FSM61+FSU65D
 ' status = db3%
 
 ' FSM60B
 ' status1 = db3%
 ' status2 = db1%

 ' FCO2TF65
 ' humidity = db3%*100.0/200.0*40
 ' co2      = db2%*2550.0/255.0
 ' temperature = db1%*51.0/255.5
  
 ' FKC+FKF
 ' status = db3%
 
 ' FRW
 ' status = db3%
 
 ' FSS12+FWZ12+FWZ61 
 ' value = db3% * &HFFFF
 ' value += db2% * &HFF
 ' value += db1%
 ' tariff = db0 and 16
 ' LRN_Button = db0 and 8
 ' switchover = db0 and 4
 '  if(db0% = 0x09){
 '     meterstatus$ = "meter status normal rate"
 ' }
 ' else if(db0% = 0x19){
 '     meterstatus$ = "meter status off-peak rate"
 ' }
 '  else if(db0% = 0x0C){
 '     meterstatus$ = "momentary power in W, normal"
 ' }
 ' else if(db0% = 0x1C){
 '     meterstatus$ = "momentary power in W, off-peak"
 ' }
 
 ' F4T65+FT4F+FT55
 ' status = db3%
 
 ' FTF65S
 ' temperature = (&HFF - db1%)*40.0/255.0
 ' lrn% = not (db9% and 8)
 
 ' FHF
 ' windowsstate% = db3%
 
 ' FTK+FTKB
 ' if db3% = &H09 then
 '     contact% = 0
 ' 
 ' else if db3% = &H08 then
 '     contact% = 1
 ' endif
 
 ' FTKE
 ' if db3% = &HF0 then
 '     windows% = 0
 ' 
 ' else if db3% = &HFE then
 '     windows% = 1
 ' endif
 
 ' FTR65DS+FTR65HS+FUTH65D
 ' select case db3%
 '    case &H00
 '        nightreduct% = &h0
 '    case &H06
 '        nightreduct% = &h1
 '    case &H0C
 '        nightreduct% = &h2
 '    case &H13
 '        nightreduct% = &h3
 '    case &H19
 '        nightreduct% = &h4
 '    case &H1F
 '        nightreduct% = &h5
 ' end select
 ' ref_temperature% = (&HFF - db1%)*40.0
 ' temperature% = (&HFF - db1%)*40.0
 ' lrn% = not (db0% and 8)
 
 ' FTR78S (EEP: A5-10-03)
 ' ref_temperature% = 8 + db2%*(22.0)/255.0
 ' temperature%      = (255.0 -db1%)*40.0/255.0
 
 ' FTS14EM (only telegrams for the Eltako-RS485-Bus)
 ' select case (db3%)
 '     case &H70
 '     controlof$ = "+E1"
 '     case &H50
 '     controlof$ = "+E2"
 '     case &H30
 '     controlof$ = "+E3"
 '     case &H10
 '     controlof$ = "+E4"
 '     case &H70
 '     controlof$ = "+E5"
 '     case &H50
 '     controlof$ = "+E6"
 '     case &H30
 '     controlof$ = "+E7"
 '     case &H10
 '     controlof$ = "+E8"
 '     case &H70
 '     controlof$ = "+E9"
 '     case &H50
 '     controlof$ = "+E10"
 ' end select
 
 ' FWS61 (EEP: A5-13-01 u. 02)

 'DSZ14DRS, DSZ14WDRS, FWZ14, FSDG14 (EEP: A5-12-01)
 ' value% = db3% * &HFFFF
 ' value% += db2% * &HFF
 ' value% += db1%
 ' tariff% = db0 and 16
 ' LRN_Button% = db0 and 8
 ' switchover% = db0 and 4
 '  if db0% = 0x09 then
 '     meterstatus$ = "meter status normal rate"
 ' 
 ' else if db0% = 0x19 then
 '     meterstatus$ = "meter status off-peak rate"
 ' 
 ' else if db0% = 0x0C then
 '     meterstatus$ = "momentary power in W, normal"
 ' 
 ' else if db0% = 0x1C then
 '     meterstatus$ = "momentary power in W, off-peak"
 ' endif

 ' FSR61VA, FSVA-230V (EEP: A5-12-01)
 ' value% = db3% * &HFFFF
 ' value% += db2% * &HFF
 ' value% += db1%
 ' LRN_Button% = db0 and 8
 ' switchover% = db0 and 4
 ' if db0% = 0x0C then
 '     meterstatus$ = "momentary power in W, normal"
 ' endif

 ' FZS
 ' status% = db3%
 
 ' FLC61-230V
 ' lrn% = not (db0% and 8)
 ' blksw% = db0% and 4
 ' swoutput% = db0% and 1
 
 ' FSB14, FSB61, FSB71
 ' runtime% = db2%
 ' command% = db1%
 ' lrn% = not (db0% and 8)

 ' FHK61SSR
 ' pwmval% = db2%
 ' pwmbasic% = db1%*10
 ' lrn% = not (db0% and 8)
 ' repeat% = db0% and 2
 ' pwmon%  = db0% and 1

 ' FSR14-2x, FSR14-4x, FSR14SSR, FSR71
 ' lrn% = not (db0% and 8)
 ' blksw% = db0% and 4
 ' swoutput% = db0% and 1

 ' FUD14, FUD14-800W, FUD61NP, FUD61NPN, FUD71,
 ' FSG14/1-10V, FSG71/1-10V, FRGBW71L, FSUD-230V
 ' dimval% = db2%
 ' if db1% = &H0 then
 '    dimspeed$ = "dimming normal"
 ' else if db1% = 0x01 then
 '    dimspeed$ = "dimming fast"
 ' else if db1% = 0xFF then
 '    dimspeed$ = "dimming slow"
 ' endif
 ' lrn% = not (db0% and 8)
 ' dim_on% = db0% and 1
 ' dim_block% = db0% and 4

 ' FADS60-230V 
 ' if db3% = &H70 then
 '    relay$ = "relay on"
 ' else if db3% = 0x01 then
 '    relay$ = "relay off"
 ' else
 '    relay$ = "relay release"
 ' endif

 ' FFR61-230V, FZK61NP-230V
 ' select case (db3%)
 '     case &H70
 '      channelst$ = "channel 1 ON"
 '  case &H50
 '      channelst$ = "channel 1 OFF"
 '  case &H30
 '      channelst$ = "channel 2 ON"
 '  case &H10
 '      channelst$ = "channel 2 OFF"
 '  case &H00
 '      channelst$ = "released"
 ' end select

 ' FHK61U-230V
 ' if db3% = &H70 then
 '    relay$ = "relay on"
 ' else if db3% = 0x01 then
 '    relay$ = "relay off"
 ' else
 '    relay$ = "relay release"
 ' endif

 ' FHK61-230V, FHK61SSR-230V
 ' select case (db3%)
 '     case &H70
 '      mode$ = "normal mode"
 '  case &H50
 '      mode$ = "night reduction"
 '  case &H30
 '      mode$ = "setback mode"
 ' end select

 ' FHK61SSR-230V
 ' select case (db3%)
 '     case &H70
 '      signalmode$ = "thaw signal input active"
 '  case &H50
 '      signalmode$ = "thaw signal input inactive"
 ' end select

 ' FMS61NP-230V
 ' select case (db3%)
 '     case &H70
 '      channelst$ = "channel 1 ON"
 '  case &H50
 '      channelst$ = "channel 1 OFF"
 '  case &H30
 '      channelst$ = "channel 2 ON"
 '  case &H10
 '      channelst$ = "channel 2 OFF"
 '  case &H00
 '      channelst$ = "released"
 ' end select
 
 ' FMZ61-230V
 ' if db3% = &H70 then
 '    relay$ = "relay on"
 ' else if db3% = 0x01 then
 '    relay$ = "relay off"
 ' else
 '    relay$ = "relay release"
 ' endif

 ' FSB61NP-230V, FSB71
 ' select case (db3%)
 '  case &H70
 '      position$ = "upper stop position"
 '  case &H50
 '      position$ = "lower stop position"
 '  case &H10
 '      position$ = "Start up"
 '  case &H20
 '      position$ = "Start down"
 ' end select

 ' FSR61NP-230V, FSR61-230V, FSR61/8-24V, FSR61LN-230V,
 ' FSR61VA-10A, FTN61NP-230V, FLC61NP-230V, FSSA-230 V,
 ' FSVA-230 V, FSR71
 ' if db3% = &H70 then
 '    relay$ = "relay on"
 ' else if db3% = 0x50 then
 '    relay$ = "relay off"
 ' else
 '    relay$ = "relay release"
 ' endif

 ' FUD61NP-230V, FUD61NPN-230V, FUD71, FSG71/1-10V, FRGBW71L,
 ' FSUD-230 V
 ' ORG5
 ' select case (db3%)
 '  case &H70
 '      dimstat$ = "dimmer on"
 '  case &H50
 '      dimstat$ = "dimmer off"
 ' end select
 ' ORG = 0x07
 ' dimval = db2%
 ' select case (db3%)
 '  case &H09
 '      dimstat$ = "dimmer on"
 '  case &H08
 '      dimstat$ = "dimmer off"
 ' end select
 
 ' FUD14, FUD14/800W, FSG14/1-10V
 ' ORG5
 ' select case (db3%)
 '  case &H70
 '      dimstat$ = "dimmer on"
 '  case &H50
 '      dimstat$ = "dimmer off"
 ' end select
 ' ORG = 0x07
 ' dimval% = db2%
 ' select case (db3%)
 '  case &H09
 '      dimstat$ = "dimmer on"
 '  case &H08
 '      dimstat$ = "dimmer off"
 ' end select

 ' FSB14
 ' select case (db3%)
 '  case &H70
 '      position$ = "upper stop position"
 '  case &H50
 '      position$ = "lower stop position"
 '  case &H10
 '      position$ = "Start up"
 '  case &H20
 '      position$ = "Start down"
 ' end select

 ' F4HK14, FHK14, FAE14LPR, FAE14SSR
 ' select case (db3%)
 '  case &H70
 '      mode$ = "normal mode"
 '  case &H50
 '      mode$ = "night reduction"
 '  case &H30
 '      mode$ = "setback mode"
 '  case &H10
 '      mode$ = "OFF"
 ' end select

 ' FMSR14
 ' FSU14
 ' if db3% = &H70 then
 '    switch$ = "switch ON"
 ' else if db3% = 0x50 then 
 '    switch$ = "switch OFF"
 ' else
 '    switch$ = "switch OFF"
 ' endif
 
 ' FSR14-2x, FSR14-4x, FSR14SSR, FFR14, FMS14, FMZ14, FTN14,
 ' FZK14, F2L14
 ' if db3% = &H70 then
 '    relay$ = "relay on"
 ' else if db3% = 0x50 then
 '    relay$ = "relay off"
 ' else
 '    relay$ = "relay release"
 ' endif

END SUB

' Receibe variable length telegram
SUB eoRxVariable(tp%,id%,db$,st%,crc8%)
print "eoRxSensor:" hex$(id%) tp% db3% db2% db1% db0% st%
 ' add your code here you can make subcalls here to your own routines
 ' Versions 2&3 Single Phase CT Clamps -  D2-32-00
 ' http://www.pressac.com/enocean-single-phase-ct-clamp-v2
 ' pf% = asc(left$(db$,1)) AND 128
 ' div% = asc(left$(db$,1)) 64
 ' meter = (asc(mid$(db$,2,1))*16)+ (asc(right$(db$,1))/16)
 ' if div% then
 '   meter = meter * 0.1
 ' endif
 
 ' Version 2 &3 Dual Phase CT Clamps - D2-32-01         
 ' http://www.pressac.com/2-phase-current-transducer-enocean-ct-clamp
 ' pf% = asc(left$(db$,1)) AND 128
 ' div% = asc(left$(db$,1)) 64
 ' meter1 = (asc(mid$(db$,2,1))*16)+ (asc(mid$(db$,3,1))/16)
 ' meter2 = ((asc(mid$(db$,3,1)) AND &H0f)*256)+ asc(right$(db$,1))
 ' if div% then
 '   meter1 = meter1 * 0.1
 '   meter2 = meter2 * 0.1
 ' endif
 
 ' Version 2 &3 Three phase CT Clamps - D2-32-02
 ' http://www.pressac.com/3-phase-current-transducer-enocean-ct-clamp
 ' pf% = asc(left$(db$,1)) AND 128
 ' div% = asc(left$(db$,1)) 64
 ' meter1 = (asc(mid$(db$,2,1))*16)+ ((asc(mid$(db$,3,1)) and &Hf0) /16)
 ' meter2 = ((asc(mid$(db$,3,1)) AND &H0f)*256)+ asc(mid$(db$,4,1))
 ' meter3 = (asc(mid$(db$,5,1))*16)+ (asc(right$(db$,1))/16)
 ' if div% then
 '   meter1 = meter1 * 0.1
 '   meter2 = meter2 * 0.1
 '   meter3 = meter3 * 0.1
 ' endif
 
END SUB


' Send a RPS/1BS message over enocean
' 
' eoTransmitRPS(&H50, &H30, &H00000000, &HFFFFFFFF, &H00) -> switch light on
' eoTransmitRPS(&H70, &H30, &H00000000, &HFFFFFFFF, &H00) -> switch light off
SUB eoTransmitRPS(db0%, st%, txid%, rxid%, enc%)
 ' Pls see enocean EEP 2.6.2 specification and ESP3 specification
 ' Type = 1 is radio
 ' Data = F6 (RORG = RPS / 1BS), switch state (0x50 = on, 0x70 = off)
 ' OptData = 03 (send) Boardcast FF FF FF FF, dBm (FF), 00 (unencrypted)  
  msg$ = chr$(&hF6)
  msg$ += chr$(db0%)  
  msg$ += conv("u32/bbe",txid%)
  ' &H30 'T21=1, NU = 1
  ' &H20 'T21=1, NU = 0
  ' &H10 'T21=0, NU = 1   
  ' &H00 'T21=0, NU = 0   
  msg$ += chr$(st%) 
  ' Send  
  msg$ += chr$(&H03)
  ' Broadcast &Hffffffff or actuator id
  msg$+=conv("u32/bbe",rxid%)
  msg$ += chr$(&HFF)
  ' no encryption &H00
  msg$+=chr$(enc%) 
  num% = EnoceanTransmit(1, msg$) 
END SUB

' log a telegram
SUB eoLog(tp%,da$,oda$,msg$)
 LOCAL s$, h$
 s$=msg$+" tp:"+str$(tp%)+" da:"
 for i=1 TO len(da$)
  h$=hex$(asc(mid$(da$,i,1)))
  IF len(h$)=1 THEN 
   h$="0"+h$
  ENDIF
  s$=s$+h$
 next
 s$=s$+" oda:"
 for i=1 TO len(oda$)
  h$=hex$(asc(mid$(oda$,i,1)))
  IF len(h$)=1 THEN 
   h$="0"+h$
  ENDIF
  s$=s$+h$
 next
 print s$
END SUB
