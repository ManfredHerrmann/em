' This script is an example of the EMDO101 energy manager
' Please visit us at www.swissembedded.com
' Copyright (c) 2011 - 2015 swissEmbedded GmbH, All rights reserved.
' @DESCRIPTION EMDO forecast solar api 
' @VERSION 1.0
' Please make sure you are registered at forecast solar with a valid api key
' The API description can be found here https://doc.forecast.solar/doku.php?id=api:estimate
' Professional accounts are available with subscription

' Some examples on usage 
'Loading Http library, make sure it is installed on EMDO
'LIBRARY LOAD "http"
'lon=8
'lat=45
'key$=""
'cb$=""
'start:
' err%=SFEstimate(key$, lat, lon, 0, 0, 1.0, "watthours/day",cb$)
' pause 30000
'goto start

' Read solar forecast of the next 2 days (Public) or 6 days (professional with key)
' API documentation available at https://doc.forecast.solar/doku.php?id=api:estimate
' key$  solar forecast key or empty string
' lat latitude -90..90 pos value = north
' lon longitude -180..180 pos value = east
' dec plane declination 0..90 0=horizontal (ground), 90 = vertical (wall)
' az plane azimut -180..180 -90 = east, 0 = south, 90 = west, -180 or 180 = north
' kwp installed power in kilowatt peak
' mode$ "watt" or "watthours" or "watthours/day"
' cb$ callback function
' return error code if negative value
' Attn:
' This callback sub must be defined by user:
' time% unix timestamp
' kw or kwh kW or kWh value
 'SFCallback(time%, kw)	or SFCallback(time%, kwh)
FUNCTION SFEstimate( key$, lat, lon, dec, az, kwp, mode$, cb$)
 LOCAL err%, n%, con%, url$
 url$=""
 IF key$<>"" THEN url$=url$+"/"+key$
 url$="/estimate/"+mode$+"/"+str$(lat)+"/"+str$(lon)+"/"+str$(dec)+"/"+str$(az)+"/"+str$(kwp)+"?time=utc"
 err%=HTTPRequest("api.forecast.solar", 80, con%, "GET",url$, "", "text/csv" , 5000)
 IF err% <0 THEN
  print "open failed"
  IF con% >=0 THEN n%=HTTPClose(con%)
   SFEstimate=err%
  EXIT FUNCTION
 ENDIF	

 LOCAL started%,ln$,tm%,p
 started%=0
 ' Right after the http header the terminated with double cr lf, 
 ' the payload comes as csv
 ' 2016-02-08;3680
 DO    
   ln$=SocketReadLn$(con%)
   print len(ln$) "/" started% "->" ln$
   IF len(ln$)=1 AND started%=1 THEN EXIT DO
   IF len(ln$)=1 AND started%=0 THEN started%=1   
   IF started%=1 and len(ln$)>10 THEN     
    'print split$(0,ln$,";")
    'print split$(1,ln$,";")
    tm%=TimeFromISO(split$(0,ln$,";"))
    p=val(split$(1,ln$,";"))    
    print cb$ tm%, p
    IF Exists(cb$) >= 0 THEN     
     CALL(cb$, tm%, p)
    ENDIF
   ENDIF   
 LOOP

 n%=HTTPClose(con%)    
 SFEstimate=err%
END FUNCTION
