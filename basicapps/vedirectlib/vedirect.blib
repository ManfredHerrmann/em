' This script is an example of the EMDO101 energy manager
' Please visit us at www.swissembedded.com
' Copyright (c) 2015 - 2017 swissEmbedded GmbH, All rights reserved.
' @DESCRIPTION Victron VE.Direct protocol for BlueSolar and SmartSolar MPPT chargers, BMV70x battery monitor
' @VERSION 1.0
' VE.Direct to RS232 interface cable to
' a USR IOT USR-TCP232-302 RS232 to ethernet gateway.
' Make sure to configure gateway to 19200, 8,n,1 TCP Server port 20108
' Cheap RS232 to RS485 converters are also available, but might need 5V power from EMDO
' Info about VE.Direct and VE.Direct HEX can be found here http://www.victronenergy.com
' at the whitepaper section. Please note that some of the devices do not support
' the HEX protocol or need a firmware upgrade to do so.
' VE.Direct-Protocol.pdf
' BlueSolar-HEX-protocol-public.pdf
' BMV-70x-HEX-Protocol-public.pdf
' Please be aware that the Victron devices do not have any galvanic isolation, therefore
' require the galvanic isolation in the victron original part cables.
' Using direct connection without galvanic isolation might ruin not only your day, but also
' your equipment!
' Some examples on usage 
' Example reading voltage from bmv70x device.
'start:
' err%=VEDirectTxt("192.168.0.25:20108","V",a$)
' V=val(a$)/1000.0
' print err% V "Volt"
' PAUSE 60000
' err%=VEDirectHex("192.168.0.25:20108","1",0,"",vl%, vls$)
' print err% vl% vls$
' err%=VEDirectHex("192.168.0.25:20108","3",0,"",vl%, vls$)
' print err% vl% vls$
' err%=VEDirectHex("192.168.0.25:20108","4",0,"",vl%, vls$)
' print err% vl% vls$
' err%=VEDirectHex("192.168.0.25:20108","7",&H010B,"string",vl%, vls$)
' print err% "model name " vls$
' err%=VEDirectHex("192.168.0.25:20108","7",&Hed8d,"un16",vl%, vls$)
' print err% "main voltage " vl%/100.0
' vl%=1
' err%=VEDirectHex("192.168.0.25:20108","8",&H34d,"un8",vl%, vls$)
' print err% "relay"
' PAUSE 1000
'GOTO start


' Victron VE.Direct reader in Text mode
' itf$ interface name, e.g. "RS485:1" or "192.168.0.1:90"
' lbl$ e.g. "V" see Protocol description for details
' vl$ returned value, e.g. 59000 which is in mV
' return negative value on error
FUNCTION VEDirectTxt(itf$, lbl$, vl$)
 LOCAL err%, interf$, num$, n%, m%, toka$(3), toks$
 ' parse if$ string
 interf$=split$(0,itf$,":")
 num$=split$(1,itf$,":")
 
 toka$(0)=chr$(13)+chr$(10)+lbl$+chr$(9)
 toka$(1)=chr$(13)+chr$(10)
 toka$(2)="toks$"
 toks$=""
 m%=-1
 IF interf$="RS485" THEN
  m%=StreamSearch(RS485Read(val(num$)),"toka$", 10000)
 ELSE
  ' Send it over ethernet
  con%=SocketClient( 1, interf$, val(num$) )   
  IF con% >0 THEN
   n%=SocketOption(con%,"SO_RCVTIMEO",5000)
   m%=StreamSearch(SocketRead(con%),"toka$", 10000)
   'print m%
   n%=SocketClose( con% )
  ENDIF
 ENDIF
 vl$=toks$
 IF m%=1 THEN
  VEDirectTxt=0
 ELSE
  VEDirectTxt=-1
 ENDIF
END FUNCTION


' Victron VE.Direct reader in HEX mode
' itf$ interface name, e.g. "RS485:1" or "192.168.0.1:90"
' cmd$ "0" to "F", 1=ping, 3=App version, 4=device id, 6=restart, 7=get, 8=set, A=async
' adr% register address to access on get or set command
' tp$ conversion string "un8" "un16", "sn16", "un32", "sn32", "string" on get or set command
' vl% value for data exchange
' vls$ value if string
FUNCTION VEDirectHex(itf$, cmd$, adr%, tp$, vl%, vls$)
 LOCAL err%, interf$, num$, n%, m%, toka$(3), toks$, a$, p$, s$, i
 ' parse if$ string
 interf$=split$(0,itf$,":")
 num$=split$(1,itf$,":")
 ': [command] [data][data][…] [check]\n
 ': [command] [dataHighNibble, dataLowNibble][……] [checkHigh, checkLow]\n
 ' High byte is send last
 p$=""
 a$=""
 IF cmd$<>"1" AND cmd$<>"3" AND cmd$<>"4" AND cmd$<>"6" AND cmd$<>"7" AND cmd$<>"8" AND cmd$<>"A" THEN
  VEDirectHex=-1
  EXIT FUNCTION
 ENDIF
 IF cmd$="7" OR cmd$="8" THEN
  a$="00"+right$("0000"+HEX$(adr%),4)
  VEReverse a$
 ENDIF 
 IF cmd$="8" AND tp$="un8" THEN
  p$=hex$(vl%)
  p$=string$(2-len(p$),"0")+p$
 ELSE IF cmd$="8" AND tp$="un16" THEN
  p$=hex$(vl%)
  p$=string$(4-len(p$),"0")+p$
  VEReverse p$
 ELSE IF cmd$="8" AND tp$="sn16" THEN
  IF vl% >= 0 THEN 
   p$=hex$(vl%)   
  ELSE 
   p$=hex$(65536-vl%)
  ENDIF
  p$=string$(4-len(p$),"0")+p$
  VEReverse p$
 ELSE IF cmd$="8" AND tp$="un32" THEN
  p$=hex$(vl%)
  p$=string$(8-len(p$),"0")+p$
  VEReverse p$
 ELSE IF cmd$="8" AND tp$="sn32" THEN
  IF vl% >= 0 THEN 
   p$=hex$(vl%)
  ELSE
   p$=hex$(4294967296-vl%)
  ENDIF
  p$=string$(8-len(p$),"0")+p$
  VEReverse p$
 ELSE IF cmd$="8" AND tp$="string" THEN
  for i= 1 TO LEN(vls$)
   s$=hex$(asc(mid$(vls$,i,1)))
   s$=string$(2-len(s$))+s$
   p$=p$+s$
 ENDIF
 p$=":"+right$(cmd$,1)+a$+p$
 VESum(p$,m%, s$, 0)
 p$=p$+s$+chr$(10)
 'print "->" p$
 toka$(0)=":"
 toka$(1)=chr$(10)
 toka$(2)="toks$"
 toks$=""
 m%=-1
 IF interf$="RS485" THEN
  RS485Write(val(num$), p$)
  ' No reply on restart command
  IF cmd$<>"6" THEN m%=StreamSearch(RS485Read(num%,5000),"toka$", 5000)
 ELSE
  ' Send it over ethernet
  con%=SocketClient( 1, interf$, val(num$) )   
  IF con% >0 THEN
   n%=SocketOption(con%,"SO_RCVTIMEO",5000)
   n%=SocketWrite( con%, p$ )
   ' No reply on restart command
   IF cmd$<>"6" THEN m%=StreamSearch(SocketRead(con%),"toka$", 5000)
   n%=SocketClose( con% )
  ENDIF
 ENDIF
 IF cmd$="6" THEN
  ' Restart command, ignore response
  VEDirectHex=0
  EXIT FUNCTION  
 ENDIF
 IF m%<>1 THEN
  VEDirectHex=-1
  EXIT FUNCTION  
 ENDIF
 
 ' Parse the response
 vls$=":"+toks$
 VESum(vls$,n%,s$,2)
 IF right$(vls$,2)<>s$ THEN
  VEDirectHex=-2
  EXIT FUNCTION
 ENDIF
 ' print "<-" vls$ " " p$
 ' We have received data, ping, application version device id return 16 bit
 IF (cmd$="1" AND left$(vls$,2)=":5") OR (cmd$="3" AND left$(vls$,2)=":1") OR (cmd$="4" AND left$(vls$,2)=":1") THEN
  ' ping returns  app version
  vls$=mid$(vls$,3,4)
  VEReverse vls$
  vls$="&H"+vls$
  vl%=val(vls$)
  VEDirectHex=0
  EXIT FUNCTION
 ELSE IF cmd$="8" AND (vls$=left$(p$,len(p$)-1)) THEN
  ' set just repeats what we have send
  VEDirectHex=0
  EXIT FUNCTION
 ELSE IF cmd$="7" AND LEFT$(vls$,2)=":7" THEN
  ' This is get
  p$=mid$(vls$,9,len(vls$)-10)
  IF tp$="un8" THEN
   vls$=p$
   vl%=val("&H"+vls$)
  ELSE IF tp$="un16" THEN
   VEReverse p$
   vls$="&H"+p$
   vl%=val(vls$)
  ELSE IF tp$="sn16" THEN
   VEReverse p$
   vls$="&H"+p$
   vl%=val(vls$)   
   IF vl% < 0 THEN vl%=vl%-65536
  ELSE IF tp$="un32" THEN
   VEReverse p$
   vls$="&H"+p$
   vl%=val(vls$)   
  ELSE IF tp$="sn32" THEN
   VEReverse p$
   vls$="&H"+p$
   vl%=val(vls$)   
   IF vl% < 0 THEN vl%=vl%-4294967296
  ELSE IF tp$="string" THEN
   vls$=""
   vl%=0
   for i=1 TO LEN(p$) STEP 2
    vls$=vls$+chr$(val("&H"+mid$(p$,i,2)))
   next i 
  ELSE
   VEDirectHex=-3
   EXIT FUNCTION
  ENDIF
  VEDirectHex=0
  EXIT FUNCTION
 ENDIF
 VEDirectHex=-4
END FUNCTION

' Reverse the data for network communication
' st$ the string to reverse the bytes (two nibbles on each byte are not swapped)
SUB VEReverse(st$)
 LOCAL i, cp$
 cp$=""
 FOR i = 1 TO Len(st$) STEP 2
  cp$=mid$(st$,i,2)+cp$
 NEXT i
 st$=cp$
END SUB

' Calculate the checksum of the string
' st$ the string to calculate the checksum from
' sum% return value of the sum
' sums$ return string of the sum
' ex% number of digits from the right to exclude from calculation, use 2 if string includes checksum
SUB VESum(st$, sum%, sums$, ex%)
 LOCAL i, cp$
 sum%=0
 'print len(st$) ex%
 ' calculate the sum, two nibbles each, first nibble is with :X, thus only one nibble
 FOR i = 1 TO (Len(st$)-ex%) STEP 2
  IF i=1 THEN
   cp$=mid$(st$,2,1)
  ELSE
   cp$=mid$(st$,i,2)
  ENDIF
   sum%=sum%+val("&H"+cp$)
 NEXT i
 sum%=(&H55-(sum% AND &HFF)) AND &HFF
 'print sum% " " hex$(sum%)
 sums$=right$("00"+hex$(sum%),2)  
END SUB
