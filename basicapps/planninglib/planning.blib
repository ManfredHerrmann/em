' This script is an example of the EMDO101 energy manager
' Please visit us at www.swissembedded.com
' Copyright (c) 2015-2016 swissEmbedded GmbH, All rights reserved.
' EMDO planning library, scheduling loads

' Some examples on usage 
' LIBRARY LOAD "planning"
 'lpc$="pbProfile"
 'ltc$="pbTrigger"
' pbAdd(0,"dishwasher", lpc$, ltc$)
' pbAdd(1,"dryer", lpc$, ltc$)
' pbAdd(2,"washer", lpc$, ltc$)
' pbAdd(3,"boilerlow", lpc$, ltc$)
' pbAdd(4,"car", lpc$, ltc$)
' pbAdd(5,"battery", lpc$, ltc$)
' pbAdd(6,"boilerhigh", lpc$, ltc$)
' pbAdd(7,"dehumidifier", lpc$, ltc$)
'start:
' DISPATCH 1000
'goto start

' take care of the profile
' id% load identifier
' nm$ load name
' FUNCTION pbProfile(id%,nm$,st%,rtm%,pL)
'  LOCAL n%
'  Read all energy meter data and update the profile
'  select case id%
'   case 0 ' dishwasher
'          n%=pbRecord(1,nm$,rtm%,60,vl,0.02,0.1)
'   case 1 ' dryer
'   case 2 ' washer
'   case 3 ' boilerlow
'   case 4 ' car
'   case 5 ' battery
'   case 6 ' boiler high
'   case 7 ' dehumidifier
'  end select
' END FUNCTION
' take care of triggering loads (on/off, load changes)
' FUNCTION pbTrigger(id%,md%,nm$,st%,rnt%,rntm%,pL,pE,pI,pP,pS)
' Plan load changes, this routine is called every minute
'  select case id%
'   case 0 ' dishwasher
'   case 1 ' dryer
'   case 2 ' washer
'   case 3 ' boilerlow
'   case 4 ' car
'   case 5 ' battery
'   case 6 ' boiler high
'   case 7 ' dehumidifier
'  end select
' END FUNCTION
 
'@lib_init
FUNCTION __planning_init()
 pbSize%=20
 pbMeterC$=pbMC"
 pbProdC$=pbPC"
 dim pbArrnm$(pbSize%) LENGTH 21
 dim pbArrlpc$(pbSize%) LENGTH 11
 dim pbArrltc$(pbSize%) LENGTH 11
 dim pbArrst%(pbSize%)
 dim pbArrrnt%(pbSize%)
 dim pbArrrntm%(pbSize%)
 dim pbArrpL(pbSize%)
 
 pbCronDesc%=CrontabAdd("* * * * *")
 IF pbCronDesc% < 0 THEN ERROR "Failed to add CRON entry"
 ELSE ON CRON pbCronDesc% pgCron
 
 pbTimerDesc%=SetTimer(10000)
 IF pbTimerDesc% < 0 THEN ERROR "Failed to add Timer entry"
 ELSE ON TIMER pbTimerDesc% pgTimer
END FUNCTION
 
'@lib_destroy
FUNCTION __planning_destroy()
 LOCAL sc%
 'sc%=CrontabRemove(pbCronDesc%)
END FUNCTION

' Load planning recalculate every minute (cron based)
' Cron handler called every minute
' id% cron identifier
' elapsed% time in ms elapsed since last schedule
' return -1 on error
' Callbacks:
' pbMC(pE,pI,pP,pS)
' pE exported energy to grid
' pI imported energy from grid
' pP produced energy by generator
' pS stored energy in battery
' pbProfile(id%,nm$)
' id% load id
' nm$ load name
' pbTrigger(id%,md%,nm$,ltc$,pE,pI,pP,pS)
' id% load id
' md% mode 0=increase load, 1=decrease load, 0=maintain load
' nm$ load name
' pE power export
' pI power import
' pP power production
' pS power storage
FUNCTION pbCron(id%,elapsed%)  
 LOCAL it%,nm$,lpc$,ltc$,st$,rtm%,pL
 ' Read all load current consumption
 FOR it%= 0 TO (pbSize%-1)
  IF pbGetLoad(it%,nm$,lpc$,ltc$,st%,rnt%,rntm%,pL)=0 and ltc$<>"" THEN
   n%=CALL(ltc$,it%,nm$,st%,rtm%,pL)
  ENDIF
 NEXT it%
 
 ' Read the power of the grid
 n%=CALL(pbMeterC$,pE,pI,pP,pS) 
 IF n% < 0 THEN
  pbCron=-1
  print pbMeterC$ " can't be called!"
  EXIT FUNCTION
 ENDIF
 ' Planning of the loads
 IF pE > 0.0 THEN
  ' we export go from highest to lowest priority
  FOR it%= 0 TO (pbSize%-1)
   IF pbGetLoad(it%,nm$,lpc$,ltc$,st%,rnt%,rntm%,pL)=0 THEN
    ' Call the load in priorized order to increase load
    n%=CALL(ltc$,id%,0,nm$,st%,rnt%,rntm%,pL,pE,pI,pP,pS)
   ENDIF
  NEXT it%
 ELSE IF pI > 0.0 THEN
  ' we export go from lowest to highest priority
  FOR it%=(pbSize%-1) TO 0 STEP -1
   IF pbGetLoad(it%,nm$,lpc$,ltc$)=0 THEN
    ' Call the load in priorized order to increase load
    n%=CALL(ltc$,id%,1,nm$,st%,rnt%,rntm%,pL,pE,pI,pP,pS)
   ENDIF
  NEXT it%
  ELSE
  ' loads are fine, but we call it anyhow
  FOR it%=0 TO (pbSize%-1)
   IF pbGetLoad(it%,nm$,lpc$,ltc$)=0 THEN
    ' Call the load in priorized order to increase load
    n%=CALL(ltc$,id%,2,nm$,st%,rnt%,rntm%,pL,pE,pI,pP,pS)
   ENDIF
  NEXT it%
 ENDIF
 pbCron=0
END FUNCTION

' Get a load entry from the list
' id%  id of the load
' nm$  name of the load
' lpc$ load profile callback
' ltc$ load trigger callback
' st%  state 0=off, 1=running, 2=paused, 3=scheduled,
'      negative values device specific error states
' rnt% runtime in seconds
' rntm% maximale runtime
' pL   load power
' return priority 0 or -1 on error
FUNCTION pbGetLoad(id%,nm$,lpc$,ltc$,st%,rnt%,rntm%,pL)
 LOCAL st$
 pbGetLoad=-1
 IF pbArrnm$(id%)<>"" THEN
  nm$=pbArrnm$(id%)
  lpc$=pbArrlpc$(id%)
  ltc$=pbArrltc$(id%)
  st%=pbArrst%(id%)
  rnt%=pbArrrnt%(id%)
  rntm%=pbArrrntm%(id%)
  pL=pbArrpL(id%)
  pbGetLoad=0
 ENDIF
END FUNCTION

' Set a load entry from the list
' id%  id of the load
' st%  state
' rnt% runtime
' rntm% maximale runtime
' pL   load power
' return priority 0 or -1 on error
FUNCTION pbSetLoad(id%,st%,rnt%,rntm%,pL)
 LOCAL st$
 pbSetLoad=-1
 IF pbArrnm$(id%)<>"" THEN
  pbArrst%(id%)=st$
  pbArrrnt%(id%)=rnt%
  pbArrrntm%(id%)=rntm%
  pbArrpL(id%)=pL
  pbSetLoad=0
 ENDIF
END FUNCTION

' Add load
' id%  id of the load
' nm$  name of the load (max 20 character)
' lpc$ load profile callback (max 10 characters)
' ltc$ load trigger callback (max 10 characters)
' rntm% maximal runtime
' return -1 on error, 0 if load added
FUNCTION pbAdd(id%, nm$, lpc$, ltc$,rntm%)
 LOCAL st$
 pbAdd=-1
 IF pbArrnm$(id%)<>"" THEN
  ' Id already exists
  pbAdd=-1
  EXIT FUNCTION
 ENDIF
 pbArrnm$(id%)=nm$
 pbArrlpc$(id%)=lpc$
 pbArrltc$(id%)=ltc$
 pbArrst%(id%)=0
 pbArrrnt%(id%)=0
 pbArrrntm%(id%)=0
 pbArrpL(id%)=0
 pbAdd=0
END FUNCTION

' Remove load from planning
' id% id of the load to be removed
' return -1 on error or id% that has been removed
FUNCTION pbRemove(id%)
 pbRemove=-1
 IF pbArrnm$(id%)<>"" THEN
  pbArrnm$(id%)=""
  pbRemove=id%
 ENDIF
END FUNCTION

' Load planning every 10 seconds (timer based)
' Timer handler called every minute
' id% cron identifier
' elapsed% time in ms elapsed since last schedule
FUNCTION pbTimer(id%,elapsed%)  
 PRINT "cron1 id=" id% " el=" elapsed% " date=" Date$()
 pbTimer=0
END FUNCTION

' Load planning adaptive learning of the load profile (recording)
' The data is stored binary (4 bytes per float)
' fn% filenumber to use
' nm$ name of the load
' rnt% run time of the device (relative time since start)
' rntm% maximal runtime
' ts% timescale (e.g. 60 for every minute)
' vl  current value
' vlt tolerance of the value, if value within tolerance, don't update flash(prevent flash wear out)
' wt  weight of the new value (0=don't learn at all..1=take new value, foget all old values)
' return -1 on error
FUNCTION pbRecord(fn%,nm$,rnt%,rntm%,ts%, vl,vlt,wt)
 local vlo, vln, s$,t$,sc%
' load the value
 ' Check if wt is in interval [0.0 1.0]
 IF wt < 0.0 or wt > 1.0 or rnt%<0 or rntm%<0 or rnt% > rntm% THEN
  pbRecord=-1
  EXIT FUNCTION
 ENDIF
 ps%=(rtm%/ts%*4+1)
 open "output/dev_"+nm$+".dat" for output as # fn%
 seek # fn%, ps%, 0
 s$=ReadFile(# fn%, 4) 
 vlo=conv("ble/f32",s$)
 vln=vlo*(1.0-wt)+vl*wt
 ' Check if update is needed
 IF abs(vln-vlo) > vlt then
  seek # fn%, ps%, 0
  s$=conv("f32/ble",vlo)
  sc%=WriteFile(# fn%, s$)  
  IF sc% <> 4 THEN
   pbRecord=-1
  ELSE 
   pbRecord=0
 ELSE
  pbRecord=0
 ENDIF
 close # fn%
END FUNCTION

' Load planning adaptive learning of the load profile (retrieve)
' The data is stored binary (4 bytes per float)
' fn% filenumber to use
' nm$ name of the load
' rnt% run time of the device (relative time since start)
' rntm% maximal runtime
' ts% timescale (e.g. 60 for every minute)
' vl value at given time
' return -1 on error
FUNCTION pbRetrieve(fn%,nm$,rnt%,rntm%,ts%,vl)
 LOCAL ps%,ln%,s$
 vl=0
 pbRetrieve=-1
 IF rnt% < 0 or rntm% <  or rnt% > rntm% THEN
  pbRetrieve=-1
  vl=0
  EXIT FUNCTION
 ENDIF
 ps%=(rtm%/ts%*4+1)
 open "output/dev_"+nm$+".dat" for input as # fn%
 ' check if this is past the end
 ln%=lof # fn%
 IF ln% >= (ps%+4) THEN
  seek # fn%, ps%, 0
  s$=ReadFile(# fn%, 4)
  vl=conv("ble/f32",s$)
  IF MM.errno THEN
   pbRetrieve=-1
  ELSE
   pbRetrieve=0
  ENDIF
 ELSE  
  pbRetrieve=-2
 ENDIF
 close # fn%
END FUNCTION

' Load planning optimize best start time
' This algorithm requires two meters, one on the grid connection and one for pv production
' fn% filenumber to use
' id%   id of the load
' wd% planning window from now on in seconds, keep it as small as possible
' strt% calculated start time
' crt%  criteria of costs 0=minimize exported energy, 1=minimize imported energy, 2=minimize costs
FUNCTION pbOptimize(fn%,id%,wd%,strt%,crt%)
 local err%,n%,it%,cost,tn%,t%,rn%,pD,pS,pP,P,ft%,rft%
 local pnm$,pst%,prnt%,prntm%,ppL
 tn%=pbMid()
 cost=0
 ' Get info about the load to be planned. 
 IF pbGetLoad(id%,pnm$,"","",pst%,prnt%,prntm%,ppL)<>0 THEN
  pbOptimize=-1
  strt%=0
  EXIT FUNCTION
 ENDIF
 ' Search windows is from future to present as we want the load to start as early as possible
 FOR t%=wd% TO 0 STEP -60
  ' search within the runtime of the device
  FOR rn%=prnt% TO prntm% step 60
  ' calculate the time point for calculation
  ft%=(tn%+t%+prntm%-prnt%) mod 86400
  ' Calculate estimated production, if estimator callback exist, we take it, otherwise we take average from past
  IF exists(pbProdC$)>0 THEN
   n%=CALL(pbProdC$,ft%,pP)
  ELSE
   err%=pbRetrieve(fn%,"prod",ft%,86400,60,pP)
  ENDIF
  ' Calculate static
  err%=pbRetrieve(fn%,"static",ft%,86400,60,pS)
  ' Calculate dynamic load of all running and scheduled loads
  pD=0
  FOR it%= 0 TO (pbSize%-1)
   IF pbGetLoad(it%,nm$,lpc$,ltc$,st%,rnt%,rntm%,pL)=0 THEN
    IF st%=1 THEN
     err%=pbRetrieve(fn%,"static",rnt%+t%,rntm%,ts%,pL)
     pD=pD+pL
	ENDIF
   ENDIF
  NEXT it%
  ' find best start
 NEXT t%
END FUNCTION

' Load planning calculate now from midnight
FUNCTION pbMid()
 LOCAL tu%
 tu%=Unixtime()
 pbMid=DateSeconds(tu%)+DateMinutes(tu%)*60+DateHours(tu%)*3600
END FUNCTION