' This script is an example of the EMDO101 energy manager
' Please visit us at www.swissembedded.com
' Copyright (c) 2017 swissEmbedded GmbH, All rights reserved.
' @DESCRIPTION EMDO Keba EV Charger control P20, P30, BMW wallbox
' @VERSION 1.0
' Please make sure the Keba station is configured correctly
' Make sure DIP-switch DWS1.3 = ON
' http://www.keba.com/en/emobility/service-support/downloads/Downloads
' UDP Programmer's Guide V2.0 
' If you have problems, pls ensure that latest firmware is installed on your Keba

' Some examples on usage 
'charger IP
'server$="192.168.0.25"
'start:
' err%=KEBAInfo( server$, info$)
' print err% info$
' pause 60000
'GOTO start

' KEBA UDP command "i"
' P20,P30,BMW wallbox
' server$ ip address of the charger
' info$ firmware and model info
' return value < 0 on error
FUNCTION KEBAInfo( server$, info$)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090 )
 IF con% < 0 THEN
  KEBAInfo=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",5000)
 n%=SocketWrite( con%, "i")
 rsp$=SocketReadLn$(con%,5000)
 n%=SocketClose( con% )
 IF rsp$=="" THEN
  KEBAInfo=-2
  EXIT FUNCTION  
 ENDIF
 info$=rsp$
 KEBAInfo=0
END FUNCTION

' KEBA UDP command "failsafe"
' P20,P30,BMW wallbox
' server$ ip address of the charger
' tmo% timeout to enter failsafe mode during charging if no KEBAEnable or KEBACurrent is send
' maxcur% max charging current in mA during failsafe mode 0, 6000-63000
' sv% 0=enable until next startup of charger, 1=enable failsafe at startup of charger
' return value < 0 on error
FUNCTION KEBAFailsafe( server$, tmo%, maxcur%, sv%)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090 )
 IF con% < 0 THEN
  KEBAFailsafe=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",5000)
 n%=SocketWrite( con%, "failsafe "+str$(tmo%)+" "+str$(maxcur%)+" "+str$(sv%))
 rsp$=SocketReadLn$(con%,5000)
 n%=SocketClose( con% )
 IF rsp$=="" OR left$(rsp$,6,2)<>"OK" THEN
  KEBAFailsafe=-2
  EXIT FUNCTION  
 ENDIF
 KEBAFailsafe=0
END FUNCTION

' KEBA UDP command "report"
' P20,P30,BMW wallbox
' server$ ip address of the charger
' id$ ID of the retrieved report
' prod$ model name
' ser$ serial number
' firm$ firmware version
' return value < 0 on error
FUNCTION KEBAReport( server$, id$, prod$, ser$, firm$)
 LOCAL err%, n%, m%, con%, rsp$
 con%=SocketClient( 0, server$, 7090 )
 IF con% < 0 THEN
  KEBAReport=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",5000)
 n%=SocketWrite( con%, "report")
 LOCAL ida$(3),ids$, proda$(3), prods$, sera$(3), sers$, firma$(3), firms$
 ida$(0)=chr$(34)+"ID"+chr$(34)+": "+chr$(34)
 ida$(1)=chr$(34)
 ida$(2)="id$"
 id$=""
 proda$(0)=chr$(34)+"Product-ID"+chr$(34)+": "+chr$(34)
 proda$(1)=chr$(34)
 proda$(2)="prod$"
 prod$=""
 sera$(0)=chr$(34)+"Serial"+chr$(34)+": "+chr$(34)
 sera$(1)=chr$(34)
 sera$(2)="ser$"
 ser$=""
 firma$(0)=chr$(34)+"Firmware"+chr$(34)+": "+chr$(34)
 firma$(1)=chr$(34)
 firma$(2)="firm$"
 firm$=""
 n%=StreamSearch(SocketRead(con%),"ida$","proda$","sera$","firma$",5000)
 m%=SocketClose( con% )

 IF n% <> 15 THEN
  KEBAReport=-2
  EXIT FUNCTION
 ENDIF
 KEBAReport=0
END FUNCTION

' Read KEBA UDP command "report 2"
' server$ ip address of the charger
' id$ ID of the retrieved report
' st% current state of the wallbox
' err1% detail code state 4
' err2% detail code state 4
' plug% current condition of loading connection
' ensys% enable state for charging
' enuser% enable condition via UDP
' maxcur% pilot max current in milliampere
' maxcurp% pilot max in 0.1%
' curhw% highest possible charging current
' currusr% current user current
' curfs% current failsafe function
' tmofs% timeout failsafe
' out% relay output x2
' inp% input x1
' ser$ serial number
' sec% system clock since wallbox start
' return value < 0 on error
FUNCTION KEBAReport2( server$, id$, st%, err1%, err2%)
 LOCAL err%, n%, m%, con%, rsp$
 con%=SocketClient( 0, server$, 7090 )
 IF con% < 0 THEN
  KEBAReport2=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",5000)
 n%=SocketWrite( con%, "report")
 LOCAL ida$(3),ids$, proda$(3), prods$, sera$(3), sers$, firma$(3), firms$
 ida$(0)=chr$(34)+"ID"+chr$(34)+": "+chr$(34)
 ida$(1)=chr$(34)
 ida$(2)="id$"
 id$=""
 proda$(0)=chr$(34)+"Product-ID"+chr$(34)+": "+chr$(34)
 proda$(1)=chr$(34)
 proda$(2)="prod$"
 prod$=""
 sera$(0)=chr$(34)+"Serial"+chr$(34)+": "+chr$(34)
 sera$(1)=chr$(34)
 sera$(2)="ser$"
 ser$=""
 firma$(0)=chr$(34)+"Firmware"+chr$(34)+": "+chr$(34)
 firma$(1)=chr$(34)
 firma$(2)="firm$"
 firm$=""
 n%=StreamSearch(SocketRead(con%),"ida$,"proda$","sera$","firma$",5000)
 m%=SocketClose( con% )

 IF n% <> 15 THEN
  KEBAReport2=-2
  EXIT FUNCTION
 ENDIF
 KEBAReport2=0
END FUNCTION

' Read KEBA UDP command "report 3"
' server$ ip address of the charger
' id$ ID of the retrieved report
' U1% voltage phase 1
' U2% voltage phase 2
' U3% voltage phase 3
' I1% current phase 1
' I2% current phase 2
' I3% current phase 3
' P% real power in mW
' PF% power factor in 0.1%
' E% power consumption in 0.1Wh for loading session
' Etot% Total power consumption in 0.1Wh without current loading session
' ser$ serial number
' sec% system clock since wallbox start
' return value < 0 on error
FUNCTION KEBAReport3( server$, id$, prod$, ser$, firm$)
 LOCAL err%, n%, m%, con%, rsp$
 con%=SocketClient( 0, server$, 7090 )
 IF con% < 0 THEN
  KEBAReport3=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",5000)
 n%=SocketWrite( con%, "report")
 LOCAL ida$(3),ids$, proda$(3), prods$, sera$(3), sers$, firma$(3), firms$
 ida$(0)=chr$(34)+"ID"+chr$(34)+": "+chr$(34)
 ida$(1)=chr$(34)
 ida$(2)="id$"
 id$=""
 proda$(0)=chr$(34)+"Product-ID"+chr$(34)+": "+chr$(34)
 proda$(1)=chr$(34)
 proda$(2)="prod$"
 prod$=""
 sera$(0)=chr$(34)+"Serial"+chr$(34)+": "+chr$(34)
 sera$(1)=chr$(34)
 sera$(2)="ser$"
 ser$=""
 firma$(0)=chr$(34)+"Firmware"+chr$(34)+": "+chr$(34)
 firma$(1)=chr$(34)
 firma$(2)="firm$"
 firm$=""
 n%=StreamSearch(SocketRead(con%),"ida$,"proda$","sera$","firma$",5000)
 m%=SocketClose( con% )

 IF n% <> 15 THEN
  KEBAReport3=-2
  EXIT FUNCTION
 ENDIF
 KEBAReport3=0
END FUNCTION

' Read KEBA UDP command "ena"
' server$ ip address of the charger
' en% enable or disable
' return value < 0 on error
FUNCTION KEBAEnable( server$, en%)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090 )
 IF con% < 0 THEN
  KEBAEnable=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",5000)
 n%=SocketWrite( con%, "ena "+str$(ena%))
 rsp$=SocketReadLn$(con%,5000)
 n%=SocketClose( con% )
 IF rsp$=="" OR left$(rsp$,6,2)<>"OK" THEN
  KEBAEnable=-2
  EXIT FUNCTION  
 ENDIF
 KEBAEnable=0
END FUNCTION

' Read KEBA UDP command "curr"
' server$ ip address of the charger
' cur% current in mA
' return value < 0 on error
FUNCTION KEBACurrent( server$, cur%)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090 )
 IF con% < 0 THEN
  KEBACurrent=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",5000)
 n%=SocketWrite( con%, "curr "+str$(cur%))
 rsp$=SocketReadLn$(con%,5000)
 n%=SocketClose( con% )
 IF rsp$=="" OR left$(rsp$,6,2)<>"OK" THEN
  KEBACurrent=-2
  EXIT FUNCTION  
 ENDIF
 KEBACurrent=0
END FUNCTION

' Read KEBA UDP command "output"
' server$ ip address of the charger
' out% output 0=open, 1=closed
' return value < 0 on error
FUNCTION KEBAOutput( server$, out%)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090 )
 IF con% < 0 THEN
  KEBAOutput=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",5000)
 n%=SocketWrite( con%, "output "+str$(out%))
 rsp$=SocketReadLn$(con%,5000)
 n%=SocketClose( con% )
 IF rsp$=="" OR left$(rsp$,6,2)<>"OK" THEN
  KEBAOutput=-2
  EXIT FUNCTION  
 ENDIF
 KEBAOutput=0
END FUNCTION
